{
  "address": "0xAa66fC535021F32F6e5C91158B306d44a3CdA156",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "endorsementStatus",
          "type": "bool"
        }
      ],
      "name": "ClientEndorsementStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noRequests",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "ClientFullRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noRequests",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "ClientRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "ClientRequestFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "statusCode",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "ClientRequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "statusCode",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ClientRequestFulfilledWithBytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noRequests",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "ClientShortRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "authorizers",
          "type": "address[]"
        }
      ],
      "name": "EndpointUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "xpub",
          "type": "string"
        }
      ],
      "name": "ProviderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "ProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "RequesterCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "RequesterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "TemplateCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "withdrawalRequestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "withdrawalRequestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "WithdrawalRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "clientAddressToNoRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "xpub",
          "type": "string"
        }
      ],
      "name": "createProvider",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "createRequester",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "createTemplate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "fail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "statusCode",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "fulfill",
      "outputs": [
        {
          "internalType": "bool",
          "name": "callSuccess",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "statusCode",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "fulfillBytes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "callSuccess",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "withdrawalRequestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "fulfillWithdrawal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        }
      ],
      "name": "getEndpointAuthorizers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "authorizers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        }
      ],
      "name": "getProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "xpub",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        }
      ],
      "name": "getTemplate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "makeFullRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fulfillAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "makeRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "makeShortRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestWithIdHasFailed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "requestWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requesterIndexToAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "requesterIndexToClientAddressToEndorsementStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requesterIndexToNoWithdrawalRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "endorsementStatus",
          "type": "bool"
        }
      ],
      "name": "updateClientEndorsementStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "authorizers",
          "type": "address[]"
        }
      ],
      "name": "updateEndpointAuthorizers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "updateProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "updateRequesterAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x18bef90968890cc24ade9032d867fb2600db833de3f23d403589cf4a3e84fa41",
  "receipt": {
    "to": null,
    "from": "0x8b4f13604Afa0B8E8Fe0932dD3288F9cA508e53B",
    "contractAddress": "0xAa66fC535021F32F6e5C91158B306d44a3CdA156",
    "transactionIndex": 0,
    "gasUsed": "3356007",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x237ddb5bb54637660517c6ebc23460c2b47a550320ff5b03690d914772abf943",
    "transactionHash": "0x18bef90968890cc24ade9032d867fb2600db833de3f23d403589cf4a3e84fa41",
    "logs": [],
    "blockNumber": 6352862,
    "cumulativeGasUsed": "3356007",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "899b63db06c6b38ac5752b9487ed15c1",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"endorsementStatus\",\"type\":\"bool\"}],\"name\":\"ClientEndorsementStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noRequests\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"ClientFullRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noRequests\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"ClientRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"ClientRequestFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"statusCode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"ClientRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"statusCode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ClientRequestFulfilledWithBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noRequests\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"ClientShortRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"authorizers\",\"type\":\"address[]\"}],\"name\":\"EndpointUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"xpub\",\"type\":\"string\"}],\"name\":\"ProviderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RequesterCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RequesterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"TemplateCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"withdrawalRequestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"withdrawalRequestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clientAddressToNoRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"xpub\",\"type\":\"string\"}],\"name\":\"createProvider\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"createRequester\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"createTemplate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"fail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"statusCode\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"fulfill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"callSuccess\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"statusCode\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"fulfillBytes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"callSuccess\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawalRequestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"fulfillWithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"}],\"name\":\"getEndpointAuthorizers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"authorizers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"}],\"name\":\"getProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"xpub\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"name\":\"getTemplate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"makeFullRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fulfillAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"makeRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"makeShortRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestWithIdHasFailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requesterIndexToAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requesterIndexToClientAddressToEndorsementStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requesterIndexToNoWithdrawalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"endorsementStatus\",\"type\":\"bool\"}],\"name\":\"updateClientEndorsementStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"authorizers\",\"type\":\"address[]\"}],\"name\":\"updateEndpointAuthorizers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"updateProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"updateRequesterAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createProvider(address,string)\":{\"details\":\"The oracle node should calculate their providerId off-chain and retrieve its details with a getProvider() call. If the xpub is does not match, it should call this method to update the provider record. Note that the provider private key can be used to update admin through this method. This is allowed on purpose, as the provider private key is more privileged than the provider admin account.\",\"params\":{\"admin\":\"Provider admin\",\"xpub\":\"Master public key of the provider node\"},\"returns\":{\"providerId\":\"Provider ID\"}},\"createRequester(address)\":{\"params\":{\"admin\":\"Requester admin\"},\"returns\":{\"requesterIndex\":\"Requester index\"}},\"createTemplate(bytes32,bytes32,uint256,address,address,bytes4,bytes)\":{\"details\":\"A specific set of request parameters will always have the same ID. This means a few things: (1) You can compute the expected ID of a set of parameters off-chain, (2) creating a new template with the same parameters will overwrite the old one and return the same template ID, (3) after you query a template with its ID, you can verify its integrity by applying the hash and comparing the result with the ID.\",\"params\":{\"designatedWallet\":\"Designated wallet that is requested to fulfill the request\",\"endpointId\":\"Endpoint ID from EndpointStore\",\"fulfillAddress\":\"Address that will be called to fulfill\",\"fulfillFunctionId\":\"Signature of the function that will be called to fulfill\",\"parameters\":\"Static request parameters (i.e., parameters that will not change between requests, unlike the dynamic parameters determined at runtime)\",\"providerId\":\"Provider ID from ProviderStore\",\"requesterIndex\":\"Requester index from RequesterStore\"},\"returns\":{\"templateId\":\"Request template ID\"}},\"fail(bytes32,bytes32,address,bytes4)\":{\"details\":\"The oracle should fall back to this if a request cannot be fulfilled because fulfill() reverts\",\"params\":{\"fulfillAddress\":\"Address that will be called to fulfill\",\"fulfillFunctionId\":\"Signature of the function that will be called to fulfill\",\"providerId\":\"Provider ID from ProviderStore\",\"requestId\":\"Request ID\"}},\"fulfill(bytes32,bytes32,uint256,bytes32,address,bytes4)\":{\"params\":{\"data\":\"Fulfillment data\",\"fulfillAddress\":\"Address that will be called to fulfill\",\"fulfillFunctionId\":\"Signature of the function that will be called to fulfill\",\"providerId\":\"Provider ID from ProviderStore\",\"requestId\":\"Request ID\",\"statusCode\":\"Status code of the fulfillment\"},\"returns\":{\"callData\":\"Data returned by the fulfillment call (if there is any)\",\"callSuccess\":\"If the fulfillment call succeeded\"}},\"fulfillBytes(bytes32,bytes32,uint256,bytes,address,bytes4)\":{\"details\":\"The oracle uses this method to fulfill if the requester has specifically asked for a bytes type response\",\"params\":{\"data\":\"Fulfillment data of type bytes\",\"fulfillAddress\":\"Address that will be called to fulfill\",\"fulfillFunctionId\":\"Signature of the function that will be called to fulfill\",\"providerId\":\"Provider ID from ProviderStore\",\"requestId\":\"Request ID\",\"statusCode\":\"Status code of the fulfillment\"},\"returns\":{\"callData\":\"Data returned by the fulfillment call (if there is any)\",\"callSuccess\":\"If the fulfillment call succeeded\"}},\"fulfillWithdrawal(bytes32,bytes32,uint256,address)\":{\"details\":\"The oracle node sends the funds through this method to emit an event that indicates that the withdrawal request has been fulfilled\",\"params\":{\"destination\":\"Withdrawal destination\",\"providerId\":\"Provider ID\",\"requesterIndex\":\"Requester index from RequesterStore\"}},\"getEndpointAuthorizers(bytes32,bytes32)\":{\"params\":{\"endpointId\":\"Endpoint ID\",\"providerId\":\"Provider ID from ProviderStore\"},\"returns\":{\"authorizers\":\"Authorizer contract addresses\"}},\"getProvider(bytes32)\":{\"params\":{\"providerId\":\"Provider ID\"},\"returns\":{\"admin\":\"Provider admin\",\"xpub\":\"Master public key of the provider node\"}},\"getTemplate(bytes32)\":{\"params\":{\"templateId\":\"Request template ID\"},\"returns\":{\"designatedWallet\":\"Designated wallet that is requested to fulfill the request\",\"endpointId\":\"Endpoint ID from EndpointStore\",\"fulfillAddress\":\"Address that will be called to fulfill\",\"fulfillFunctionId\":\"Signature of the function that will be called to fulfill\",\"parameters\":\"Static request parameters (i.e., parameters that will not change between requests, unlike the dynamic parameters determined at runtime)\",\"providerId\":\"Provider ID from ProviderStore\",\"requesterIndex\":\"Requester index from RequesterStore\"}},\"makeFullRequest(bytes32,bytes32,uint256,address,address,bytes4,bytes)\":{\"details\":\"This is the least gas efficient way of making a request. Do not use it unless you have a good reason.\",\"params\":{\"designatedWallet\":\"Designated wallet that is requested to fulfill the request\",\"endpointId\":\"Endpoint ID from EndpointStore\",\"fulfillAddress\":\"Address that will be called to fulfill\",\"fulfillFunctionId\":\"Signature of the function that will be called to fulfill\",\"parameters\":\"All request parameters\",\"providerId\":\"Provider ID from ProviderStore\",\"requesterIndex\":\"Requester index from RequesterStore\"},\"returns\":{\"requestId\":\"Request ID\"}},\"makeRequest(bytes32,uint256,address,address,bytes4,bytes)\":{\"details\":\"This is the recommended way of making a request in most cases. Use makeShortRequest() if gas efficiency is critical.\",\"params\":{\"designatedWallet\":\"Designated wallet that is requested to fulfill the request\",\"fulfillAddress\":\"Address that will be called to fulfill\",\"fulfillFunctionId\":\"Signature of the function that will be called to fulfill\",\"parameters\":\"Dynamic request parameters (i.e., parameters that are determined at runtime, unlike the static parameters stored in the template)\",\"requesterIndex\":\"Requester index from RequesterStore\",\"templateId\":\"Template ID from TemplateStore\"},\"returns\":{\"requestId\":\"Request ID\"}},\"makeShortRequest(bytes32,bytes)\":{\"details\":\"Use this if gas efficiency is critical\",\"params\":{\"parameters\":\"Dynamic request parameters (i.e., parameters that are determined at runtime, unlike the static parameters stored in the template)\",\"templateId\":\"Template ID from TemplateStore\"},\"returns\":{\"requestId\":\"Request ID\"}},\"requestWithdrawal(bytes32,uint256,address,address)\":{\"details\":\"We do not need to use the withdrawal request parameters in the request ID hash to validate them at the node side because all of the parameters are used during fulfillment and will get validated on-chain.\",\"params\":{\"designatedWallet\":\"Designated wallet that the withdrawal is requested from\",\"destination\":\"Withdrawal destination\",\"providerId\":\"Provider ID\",\"requesterIndex\":\"Requester index from RequesterStore\"}},\"updateClientEndorsementStatus(uint256,address,bool)\":{\"details\":\"This is not provider specific, i.e., the requester allows the client's requests to be fulfilled through its designated wallets across all providers\",\"params\":{\"clientAddress\":\"Client address\",\"requesterIndex\":\"Requester index\"}},\"updateEndpointAuthorizers(bytes32,bytes32,address[])\":{\"params\":{\"authorizers\":\"Authorizer contract addresses\",\"endpointId\":\"Endpoint ID\",\"providerId\":\"Provider ID from ProviderStore\"}},\"updateProvider(bytes32,address)\":{\"params\":{\"admin\":\"Provider admin\",\"providerId\":\"Provider ID\"}},\"updateRequesterAdmin(uint256,address)\":{\"params\":{\"admin\":\"Requester admin\",\"requesterIndex\":\"Requester index\"}}},\"title\":\"The contract used to make and fulfill requests\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createProvider(address,string)\":{\"notice\":\"Allows the master wallet (m) of the provider to create a provider record on this chain\"},\"createRequester(address)\":{\"notice\":\"Creates a requester with the given parameters, addressable by the index it returns\"},\"createTemplate(bytes32,bytes32,uint256,address,address,bytes4,bytes)\":{\"notice\":\"Creates a request template with the given parameters, addressable by the ID it returns\"},\"fail(bytes32,bytes32,address,bytes4)\":{\"notice\":\"Called by the oracle node if a request cannot be fulfilled\"},\"fulfill(bytes32,bytes32,uint256,bytes32,address,bytes4)\":{\"notice\":\"Called by the oracle node to fulfill individual requests (including regular, short and full requests)\"},\"fulfillBytes(bytes32,bytes32,uint256,bytes,address,bytes4)\":{\"notice\":\"Called by the oracle node to fulfill individual requests (including regular, short and full requests) with a bytes type response\"},\"fulfillWithdrawal(bytes32,bytes32,uint256,address)\":{\"notice\":\"Called by the designated wallet to fulfill the withdrawal request made by the requester\"},\"getEndpointAuthorizers(bytes32,bytes32)\":{\"notice\":\"Retrieves the endpoint parameters addressed by the ID\"},\"getProvider(bytes32)\":{\"notice\":\"Retrieves provider parameters addressed by the ID\"},\"getTemplate(bytes32)\":{\"notice\":\"Retrieves request parameters addressed by the ID\"},\"makeFullRequest(bytes32,bytes32,uint256,address,address,bytes4,bytes)\":{\"notice\":\"Called by the requester to make a full request. A full request does not refer to a template, meaning that it passes all the parameters in the request. It does not require a template to be created beforehand, which provides extra flexibility compared to makeRequest() and makeShortRequest().\"},\"makeRequest(bytes32,uint256,address,address,bytes4,bytes)\":{\"notice\":\"Called by the client to make a regular request. A regular request refers to a template for the requester-agnostic parameters, but requires the client to provide the requester-specific parameters.\"},\"makeShortRequest(bytes32,bytes)\":{\"notice\":\"Called by the requester to make a short request. A short request refers to a template, which the provider will use to get both requester-agnostic and requester-specific parameters\"},\"requestWithdrawal(bytes32,uint256,address,address)\":{\"notice\":\"Called by the requester admin to create a request for the provider to send the funds kept in their designated wallet to destination\"},\"updateClientEndorsementStatus(uint256,address,bool)\":{\"notice\":\"Called by the requester admin to endorse a client, i.e., allow a client to use its designated wallets\"},\"updateEndpointAuthorizers(bytes32,bytes32,address[])\":{\"notice\":\"Updates the endpoint authorizers of a provider\"},\"updateProvider(bytes32,address)\":{\"notice\":\"Updates the provider\"},\"updateRequesterAdmin(uint256,address)\":{\"notice\":\"Updates the requester admin\"}},\"notice\":\"Clients use this contract to make requests that follow a request-response scheme. In addition, it inherits from contracts that keep records of providers, requesters, endpoints, etc.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Airnode.sol\":\"Airnode\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Airnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./interfaces/IAirnode.sol\\\";\\r\\nimport \\\"./EndpointStore.sol\\\";\\r\\nimport \\\"./TemplateStore.sol\\\";\\r\\n\\r\\n\\r\\n/// @title The contract used to make and fulfill requests\\r\\n/// @notice Clients use this contract to make requests that follow a\\r\\n/// request-response scheme. In addition, it inherits from contracts that keep\\r\\n/// records of providers, requesters, endpoints, etc.\\r\\ncontract Airnode is EndpointStore, TemplateStore, IAirnode {\\r\\n    mapping(bytes32 => bytes32) private requestIdToFulfillmentParameters;\\r\\n    mapping(bytes32 => bool) public requestWithIdHasFailed;\\r\\n\\r\\n\\r\\n    /// @notice Called by the client to make a regular request. A regular\\r\\n    /// request refers to a template for the requester-agnostic parameters, but\\r\\n    /// requires the client to provide the requester-specific parameters.\\r\\n    /// @dev This is the recommended way of making a request in most cases. Use\\r\\n    /// makeShortRequest() if gas efficiency is critical.\\r\\n    /// @param templateId Template ID from TemplateStore\\r\\n    /// @param requesterIndex Requester index from RequesterStore\\r\\n    /// @param designatedWallet Designated wallet that is requested to fulfill\\r\\n    /// the request\\r\\n    /// @param fulfillAddress Address that will be called to fulfill\\r\\n    /// @param fulfillFunctionId Signature of the function that will be called\\r\\n    /// to fulfill\\r\\n    /// @param parameters Dynamic request parameters (i.e., parameters that are\\r\\n    /// determined at runtime, unlike the static parameters stored in the\\r\\n    /// template)\\r\\n    /// @return requestId Request ID\\r\\n    function makeRequest(\\r\\n        bytes32 templateId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes calldata parameters\\r\\n        )\\r\\n        external\\r\\n        override\\r\\n        returns (bytes32 requestId)\\r\\n    {\\r\\n        require(\\r\\n            requesterIndexToClientAddressToEndorsementStatus[requesterIndex][msg.sender],\\r\\n            \\\"Client not endorsed by requester\\\"\\r\\n            );\\r\\n        uint256 clientNoRequests = clientAddressToNoRequests[msg.sender];\\r\\n        requestId = keccak256(abi.encode(\\r\\n            clientNoRequests,\\r\\n            msg.sender,\\r\\n            templateId,\\r\\n            parameters\\r\\n            ));\\r\\n        bytes32 providerId = templates[templateId].providerId;\\r\\n        requestIdToFulfillmentParameters[requestId] = keccak256(abi.encodePacked(\\r\\n            providerId,\\r\\n            designatedWallet,\\r\\n            fulfillAddress,\\r\\n            fulfillFunctionId\\r\\n            ));\\r\\n        emit ClientRequestCreated(\\r\\n            providerId,\\r\\n            requestId,\\r\\n            clientNoRequests,\\r\\n            msg.sender,\\r\\n            templateId,\\r\\n            requesterIndex,\\r\\n            designatedWallet,\\r\\n            fulfillAddress,\\r\\n            fulfillFunctionId,\\r\\n            parameters\\r\\n        );\\r\\n        clientAddressToNoRequests[msg.sender]++;\\r\\n    }\\r\\n\\r\\n    /// @notice Called by the requester to make a short request. A short\\r\\n    /// request refers to a template, which the provider will use to get both\\r\\n    /// requester-agnostic and requester-specific parameters\\r\\n    /// @dev Use this if gas efficiency is critical\\r\\n    /// @param templateId Template ID from TemplateStore\\r\\n    /// @param parameters Dynamic request parameters (i.e., parameters that are\\r\\n    /// determined at runtime, unlike the static parameters stored in the\\r\\n    /// template)\\r\\n    /// @return requestId Request ID\\r\\n    function makeShortRequest(\\r\\n        bytes32 templateId,\\r\\n        bytes calldata parameters\\r\\n        )\\r\\n        external\\r\\n        override\\r\\n        returns (bytes32 requestId)\\r\\n    {\\r\\n        Template storage template = templates[templateId];\\r\\n        require(\\r\\n            requesterIndexToClientAddressToEndorsementStatus[template.requesterIndex][msg.sender],\\r\\n            \\\"Client not endorsed by requester\\\"\\r\\n            );\\r\\n        uint256 clientNoRequests = clientAddressToNoRequests[msg.sender];\\r\\n        requestId = keccak256(abi.encode(\\r\\n            clientNoRequests,\\r\\n            msg.sender,\\r\\n            templateId,\\r\\n            parameters\\r\\n            ));\\r\\n        requestIdToFulfillmentParameters[requestId] = keccak256(abi.encodePacked(\\r\\n            template.providerId,\\r\\n            template.designatedWallet,\\r\\n            template.fulfillAddress,\\r\\n            template.fulfillFunctionId\\r\\n            ));\\r\\n        emit ClientShortRequestCreated(\\r\\n            templates[templateId].providerId,\\r\\n            requestId,\\r\\n            clientNoRequests,\\r\\n            msg.sender,\\r\\n            templateId,\\r\\n            parameters\\r\\n        );\\r\\n        clientAddressToNoRequests[msg.sender]++;\\r\\n    }\\r\\n\\r\\n    /// @notice Called by the requester to make a full request. A full request\\r\\n    /// does not refer to a template, meaning that it passes all the parameters\\r\\n    /// in the request. It does not require a template to be created\\r\\n    /// beforehand, which provides extra flexibility compared to makeRequest()\\r\\n    /// and makeShortRequest().\\r\\n    /// @dev This is the least gas efficient way of making a request. Do not\\r\\n    /// use it unless you have a good reason.\\r\\n    /// @param providerId Provider ID from ProviderStore\\r\\n    /// @param endpointId Endpoint ID from EndpointStore\\r\\n    /// @param requesterIndex Requester index from RequesterStore\\r\\n    /// @param designatedWallet Designated wallet that is requested to fulfill\\r\\n    /// the request\\r\\n    /// @param fulfillAddress Address that will be called to fulfill\\r\\n    /// @param fulfillFunctionId Signature of the function that will be called\\r\\n    /// to fulfill\\r\\n    /// @param parameters All request parameters\\r\\n    /// @return requestId Request ID\\r\\n    function makeFullRequest(\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes calldata parameters\\r\\n        )\\r\\n        external\\r\\n        override\\r\\n        returns (bytes32 requestId)\\r\\n    {\\r\\n        require(\\r\\n            requesterIndexToClientAddressToEndorsementStatus[requesterIndex][msg.sender],\\r\\n            \\\"Client not endorsed by requester\\\"\\r\\n            );\\r\\n        uint256 clientNoRequests = clientAddressToNoRequests[msg.sender];\\r\\n        requestId = keccak256(abi.encode(\\r\\n            clientNoRequests,\\r\\n            msg.sender,\\r\\n            endpointId,\\r\\n            parameters\\r\\n            ));\\r\\n        requestIdToFulfillmentParameters[requestId] = keccak256(abi.encodePacked(\\r\\n            providerId,\\r\\n            designatedWallet,\\r\\n            fulfillAddress,\\r\\n            fulfillFunctionId\\r\\n            ));\\r\\n        emit ClientFullRequestCreated(\\r\\n            providerId,\\r\\n            requestId,\\r\\n            clientNoRequests,\\r\\n            msg.sender,\\r\\n            endpointId,\\r\\n            requesterIndex,\\r\\n            designatedWallet,\\r\\n            fulfillAddress,\\r\\n            fulfillFunctionId,\\r\\n            parameters\\r\\n        );\\r\\n        clientAddressToNoRequests[msg.sender]++;\\r\\n    }\\r\\n\\r\\n    /// @notice Called by the oracle node to fulfill individual requests\\r\\n    /// (including regular, short and full requests)\\r\\n    /// @param requestId Request ID\\r\\n    /// @param providerId Provider ID from ProviderStore\\r\\n    /// @param statusCode Status code of the fulfillment\\r\\n    /// @param data Fulfillment data\\r\\n    /// @param fulfillAddress Address that will be called to fulfill\\r\\n    /// @param fulfillFunctionId Signature of the function that will be called\\r\\n    /// to fulfill\\r\\n    /// @return callSuccess If the fulfillment call succeeded\\r\\n    /// @return callData Data returned by the fulfillment call (if there is\\r\\n    /// any)\\r\\n    function fulfill(\\r\\n        bytes32 requestId,\\r\\n        bytes32 providerId,\\r\\n        uint256 statusCode,\\r\\n        bytes32 data,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId\\r\\n        )\\r\\n        external\\r\\n        override\\r\\n        onlyCorrectFulfillmentParameters(\\r\\n            requestId,\\r\\n            providerId,\\r\\n            fulfillAddress,\\r\\n            fulfillFunctionId\\r\\n            )\\r\\n        returns(\\r\\n            bool callSuccess,\\r\\n            bytes memory callData\\r\\n        )\\r\\n    {\\r\\n        delete requestIdToFulfillmentParameters[requestId];\\r\\n        emit ClientRequestFulfilled(\\r\\n            providerId,\\r\\n            requestId,\\r\\n            statusCode,\\r\\n            data\\r\\n            );\\r\\n        (callSuccess, callData) = fulfillAddress.call(  // solhint-disable-line\\r\\n            abi.encodeWithSelector(fulfillFunctionId, requestId, statusCode, data)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Called by the oracle node to fulfill individual requests\\r\\n    /// (including regular, short and full requests) with a bytes type response\\r\\n    /// @dev The oracle uses this method to fulfill if the requester has\\r\\n    /// specifically asked for a bytes type response\\r\\n    /// @param requestId Request ID\\r\\n    /// @param providerId Provider ID from ProviderStore\\r\\n    /// @param statusCode Status code of the fulfillment\\r\\n    /// @param data Fulfillment data of type bytes\\r\\n    /// @param fulfillAddress Address that will be called to fulfill\\r\\n    /// @param fulfillFunctionId Signature of the function that will be called\\r\\n    /// to fulfill\\r\\n    /// @return callSuccess If the fulfillment call succeeded\\r\\n    /// @return callData Data returned by the fulfillment call (if there is\\r\\n    /// any)\\r\\n    function fulfillBytes(\\r\\n        bytes32 requestId,\\r\\n        bytes32 providerId,\\r\\n        uint256 statusCode,\\r\\n        bytes calldata data,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId\\r\\n        )\\r\\n        external\\r\\n        override\\r\\n        onlyCorrectFulfillmentParameters(\\r\\n            requestId,\\r\\n            providerId,\\r\\n            fulfillAddress,\\r\\n            fulfillFunctionId\\r\\n            )\\r\\n        returns(\\r\\n            bool callSuccess,\\r\\n            bytes memory callData\\r\\n        )\\r\\n    {\\r\\n        delete requestIdToFulfillmentParameters[requestId];\\r\\n        emit ClientRequestFulfilledWithBytes(\\r\\n            providerId,\\r\\n            requestId,\\r\\n            statusCode,\\r\\n            data\\r\\n            );\\r\\n        (callSuccess, callData) = fulfillAddress.call(  // solhint-disable-line\\r\\n            abi.encodeWithSelector(fulfillFunctionId, requestId, statusCode, data)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Called by the oracle node if a request cannot be fulfilled\\r\\n    /// @dev The oracle should fall back to this if a request cannot be\\r\\n    /// fulfilled because fulfill() reverts\\r\\n    /// @param requestId Request ID\\r\\n    /// @param providerId Provider ID from ProviderStore\\r\\n    /// @param fulfillAddress Address that will be called to fulfill\\r\\n    /// @param fulfillFunctionId Signature of the function that will be called\\r\\n    /// to fulfill\\r\\n    function fail(\\r\\n        bytes32 requestId,\\r\\n        bytes32 providerId,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId\\r\\n        )\\r\\n        external\\r\\n        override\\r\\n        onlyCorrectFulfillmentParameters(\\r\\n            requestId,\\r\\n            providerId,\\r\\n            fulfillAddress,\\r\\n            fulfillFunctionId\\r\\n            )\\r\\n    {\\r\\n        delete requestIdToFulfillmentParameters[requestId];\\r\\n        // Failure is recorded so that it can be checked externally\\r\\n        requestWithIdHasFailed[requestId] = true;\\r\\n        emit ClientRequestFailed(\\r\\n            providerId,\\r\\n            requestId\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Reverts unless the incoming fulfillment parameters do not match\\r\\n    /// the ones provided in the request\\r\\n    /// @param requestId Request ID\\r\\n    /// @param providerId Provider ID from ProviderStore\\r\\n    /// @param fulfillAddress Address that will be called to fulfill\\r\\n    /// @param fulfillFunctionId Signature of the function that will be called\\r\\n    /// to fulfill\\r\\n    modifier onlyCorrectFulfillmentParameters(\\r\\n        bytes32 requestId,\\r\\n        bytes32 providerId,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId\\r\\n        )\\r\\n    {\\r\\n        bytes32 incomingFulfillmentParameters = keccak256(abi.encodePacked(\\r\\n            providerId,\\r\\n            msg.sender,\\r\\n            fulfillAddress,\\r\\n            fulfillFunctionId\\r\\n            ));\\r\\n        require(\\r\\n            incomingFulfillmentParameters == requestIdToFulfillmentParameters[requestId],\\r\\n            \\\"Incorrect fulfillment parameters\\\"\\r\\n            );\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x70f85ea6134b4c1312a296d924fb2be77b4180a8eb2622eb8d55ec0c5c201eca\",\"license\":\"MIT\"},\"contracts/EndpointStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./interfaces/IEndpointStore.sol\\\";\\r\\nimport \\\"./ProviderStore.sol\\\";\\r\\n\\r\\n\\r\\n/// @title The contract where the endpoints are stored\\r\\n/// @notice This contract is used by the provider admin to associate their\\r\\n/// endpoints with authorization policies, which both the oracle node and the\\r\\n/// requester can check to verify authorization.\\r\\ncontract EndpointStore is ProviderStore, IEndpointStore {\\r\\n    mapping(bytes32 => mapping(bytes32 => address[])) private providerIdToEndpointIdToAuthorizers;\\r\\n\\r\\n\\r\\n    /// @notice Updates the endpoint authorizers of a provider\\r\\n    /// @param providerId Provider ID from ProviderStore\\r\\n    /// @param endpointId Endpoint ID\\r\\n    /// @param authorizers Authorizer contract addresses\\r\\n    function updateEndpointAuthorizers(\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId,\\r\\n        address[] calldata authorizers\\r\\n        )\\r\\n        external\\r\\n        override\\r\\n        onlyProviderAdmin(providerId)\\r\\n    {\\r\\n        providerIdToEndpointIdToAuthorizers[providerId][endpointId] = authorizers;\\r\\n        emit EndpointUpdated(\\r\\n            providerId,\\r\\n            endpointId,\\r\\n            authorizers\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves the endpoint parameters addressed by the ID\\r\\n    /// @param providerId Provider ID from ProviderStore\\r\\n    /// @param endpointId Endpoint ID\\r\\n    /// @return authorizers Authorizer contract addresses\\r\\n    function getEndpointAuthorizers(\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId\\r\\n        )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns(address[] memory authorizers)\\r\\n    {\\r\\n        authorizers = providerIdToEndpointIdToAuthorizers[providerId][endpointId];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x52635151b485719e0262ae58ae7e4752019f7025bd165b79b85c8fb28dbf4b63\",\"license\":\"MIT\"},\"contracts/ProviderStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./interfaces/IProviderStore.sol\\\";\\r\\nimport \\\"./RequesterStore.sol\\\";\\r\\n\\r\\n\\r\\n/// @title The contract where the providers are stored\\r\\ncontract ProviderStore is RequesterStore, IProviderStore {\\r\\n    struct Provider {\\r\\n        address admin;\\r\\n        string xpub;\\r\\n        }\\r\\n\\r\\n    mapping(bytes32 => Provider) internal providers;\\r\\n    mapping(bytes32 => bytes32) private withdrawalRequestIdToParameters;\\r\\n\\r\\n\\r\\n    /// @notice Allows the master wallet (m) of the provider to create a\\r\\n    /// provider record on this chain\\r\\n    /// @dev The oracle node should calculate their providerId off-chain and\\r\\n    /// retrieve its details with a getProvider() call. If the xpub is does not\\r\\n    /// match, it should call this method to update the provider record.\\r\\n    /// Note that the provider private key can be used to update admin through\\r\\n    /// this method. This is allowed on purpose, as the provider private key is\\r\\n    /// more privileged than the provider admin account.\\r\\n    /// @param admin Provider admin\\r\\n    /// @param xpub Master public key of the provider node\\r\\n    /// @return providerId Provider ID\\r\\n    function createProvider(\\r\\n        address admin,\\r\\n        string calldata xpub\\r\\n        )\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        returns (bytes32 providerId)\\r\\n    {\\r\\n        providerId = keccak256(abi.encode(msg.sender));\\r\\n        providers[providerId] = Provider({\\r\\n            admin: admin,\\r\\n            xpub: xpub\\r\\n            });\\r\\n        emit ProviderCreated(\\r\\n            providerId,\\r\\n            admin,\\r\\n            xpub\\r\\n            );\\r\\n        if (msg.value > 0)\\r\\n        {\\r\\n            (bool success, ) = admin.call{ value: msg.value }(\\\"\\\");  // solhint-disable-line\\r\\n            require(success, \\\"Transfer failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the provider\\r\\n    /// @param providerId Provider ID\\r\\n    /// @param admin Provider admin\\r\\n    function updateProvider(\\r\\n        bytes32 providerId,\\r\\n        address admin\\r\\n        )\\r\\n        external\\r\\n        override\\r\\n        onlyProviderAdmin(providerId)\\r\\n    {\\r\\n        providers[providerId].admin = admin;\\r\\n        emit ProviderUpdated(\\r\\n            providerId,\\r\\n            admin\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Called by the requester admin to create a request for the\\r\\n    /// provider to send the funds kept in their designated wallet to\\r\\n    /// destination\\r\\n    /// @dev We do not need to use the withdrawal request parameters in the\\r\\n    /// request ID hash to validate them at the node side because all of the\\r\\n    /// parameters are used during fulfillment and will get validated on-chain.\\r\\n    /// @param providerId Provider ID\\r\\n    /// @param requesterIndex Requester index from RequesterStore\\r\\n    /// @param designatedWallet Designated wallet that the withdrawal is\\r\\n    /// requested from\\r\\n    /// @param destination Withdrawal destination\\r\\n    function requestWithdrawal(\\r\\n        bytes32 providerId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address destination\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlyRequesterAdmin(requesterIndex)\\r\\n    {\\r\\n        bytes32 withdrawalRequestId = keccak256(abi.encodePacked(\\r\\n            requesterIndexToNoWithdrawalRequests[requesterIndex]++,\\r\\n            requesterIndex,\\r\\n            this\\r\\n            ));\\r\\n        bytes32 withdrawalParameters = keccak256(abi.encodePacked(\\r\\n            providerId,\\r\\n            requesterIndex,\\r\\n            designatedWallet,\\r\\n            destination\\r\\n            ));\\r\\n        withdrawalRequestIdToParameters[withdrawalRequestId] = withdrawalParameters;\\r\\n        emit WithdrawalRequested(\\r\\n            providerId,\\r\\n            requesterIndex,\\r\\n            withdrawalRequestId,\\r\\n            designatedWallet,\\r\\n            destination\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Called by the designated wallet to fulfill the withdrawal\\r\\n    /// request made by the requester\\r\\n    /// @dev The oracle node sends the funds through this method to emit an\\r\\n    /// event that indicates that the withdrawal request has been fulfilled\\r\\n    /// @param providerId Provider ID\\r\\n    /// @param requesterIndex Requester index from RequesterStore\\r\\n    /// @param destination Withdrawal destination\\r\\n    function fulfillWithdrawal(\\r\\n        bytes32 withdrawalRequestId,\\r\\n        bytes32 providerId,\\r\\n        uint256 requesterIndex,\\r\\n        address destination\\r\\n        )\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n    {\\r\\n        bytes32 withdrawalParameters = keccak256(abi.encodePacked(\\r\\n            providerId,\\r\\n            requesterIndex,\\r\\n            msg.sender,\\r\\n            destination\\r\\n            ));\\r\\n        require(\\r\\n            withdrawalRequestIdToParameters[withdrawalRequestId] == withdrawalParameters,\\r\\n            \\\"No such withdrawal request\\\"\\r\\n            );\\r\\n        delete withdrawalRequestIdToParameters[withdrawalRequestId];\\r\\n        emit WithdrawalFulfilled(\\r\\n            providerId,\\r\\n            requesterIndex,\\r\\n            withdrawalRequestId,\\r\\n            msg.sender,\\r\\n            destination,\\r\\n            msg.value\\r\\n            );\\r\\n        (bool success, ) = destination.call{ value: msg.value }(\\\"\\\");  // solhint-disable-line\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves provider parameters addressed by the ID\\r\\n    /// @param providerId Provider ID\\r\\n    /// @return admin Provider admin\\r\\n    /// @return xpub Master public key of the provider node\\r\\n    function getProvider(bytes32 providerId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            address admin,\\r\\n            string memory xpub\\r\\n        )\\r\\n    {\\r\\n        admin = providers[providerId].admin;\\r\\n        xpub = providers[providerId].xpub;\\r\\n    }\\r\\n\\r\\n    /// @dev Reverts if the caller is not the provider admin\\r\\n    /// @param providerId Provider ID\\r\\n    modifier onlyProviderAdmin(bytes32 providerId)\\r\\n    {\\r\\n        require(\\r\\n            msg.sender == providers[providerId].admin,\\r\\n            \\\"Caller is not provider admin\\\"\\r\\n            );\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdfa2a49a24be1197ead3197781fc88a1f2866a2929c61e2ce9c3b1a15ae34495\",\"license\":\"MIT\"},\"contracts/RequesterStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./interfaces/IRequesterStore.sol\\\";\\r\\n\\r\\n\\r\\n/// @title The contract where the requesters are stored\\r\\n/// @notice This contract is used by requesters to manage their endorsemenets.\\r\\n/// A requester endorsing a client means that the client can request their\\r\\n/// requests to be fulfilled by the respective requester's designated wallets.\\r\\ncontract RequesterStore is IRequesterStore {\\r\\n    mapping(uint256 => address) public requesterIndexToAdmin;\\r\\n    mapping(uint256 => mapping(address => bool)) public requesterIndexToClientAddressToEndorsementStatus;\\r\\n    mapping(address => uint256) public clientAddressToNoRequests;\\r\\n    mapping(uint256 => uint256) public requesterIndexToNoWithdrawalRequests;\\r\\n    uint256 private noRequesters = 1;\\r\\n\\r\\n\\r\\n    /// @notice Creates a requester with the given parameters, addressable by\\r\\n    /// the index it returns\\r\\n    /// @param admin Requester admin\\r\\n    /// @return requesterIndex Requester index\\r\\n    function createRequester(address admin)\\r\\n        external\\r\\n        override\\r\\n        returns (uint256 requesterIndex)\\r\\n    {\\r\\n        requesterIndex = noRequesters++;\\r\\n        requesterIndexToAdmin[requesterIndex] = admin;\\r\\n        // Initialize the requester nonce during creation for consistent\\r\\n        // withdrawal request gas cost\\r\\n        requesterIndexToNoWithdrawalRequests[requesterIndex] = 1;\\r\\n        emit RequesterCreated(\\r\\n            requesterIndex,\\r\\n            admin\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the requester admin\\r\\n    /// @param requesterIndex Requester index\\r\\n    /// @param admin Requester admin\\r\\n    function updateRequesterAdmin(\\r\\n        uint256 requesterIndex,\\r\\n        address admin\\r\\n        )\\r\\n        external\\r\\n        override\\r\\n        onlyRequesterAdmin(requesterIndex)\\r\\n    {\\r\\n        requesterIndexToAdmin[requesterIndex] = admin;\\r\\n        emit RequesterUpdated(\\r\\n            requesterIndex,\\r\\n            admin\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Called by the requester admin to endorse a client, i.e., allow\\r\\n    /// a client to use its designated wallets\\r\\n    /// @dev This is not provider specific, i.e., the requester allows the\\r\\n    /// client's requests to be fulfilled through its designated wallets across\\r\\n    /// all providers\\r\\n    /// @param requesterIndex Requester index\\r\\n    /// @param clientAddress Client address\\r\\n    function updateClientEndorsementStatus(\\r\\n        uint256 requesterIndex,\\r\\n        address clientAddress,\\r\\n        bool endorsementStatus\\r\\n        )\\r\\n        external\\r\\n        override\\r\\n        onlyRequesterAdmin(requesterIndex)\\r\\n    {\\r\\n        // Initialize the client nonce if it is being endorsed for the first\\r\\n        // time for consistent request gas cost\\r\\n        if (endorsementStatus && clientAddressToNoRequests[clientAddress] == 0)\\r\\n        {\\r\\n            clientAddressToNoRequests[clientAddress] = 1;\\r\\n        }\\r\\n        requesterIndexToClientAddressToEndorsementStatus[requesterIndex][clientAddress] = endorsementStatus;\\r\\n        emit ClientEndorsementStatusUpdated(\\r\\n            requesterIndex,\\r\\n            clientAddress,\\r\\n            endorsementStatus\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Reverts if the caller is not the requester admin\\r\\n    /// @param requesterIndex Requester index\\r\\n    modifier onlyRequesterAdmin(uint256 requesterIndex)\\r\\n    {\\r\\n        require(\\r\\n            msg.sender == requesterIndexToAdmin[requesterIndex],\\r\\n            \\\"Caller is not requester admin\\\"\\r\\n            );\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x94776ff5717e312f00c9abd5e5d9564011ebdc461a427fa0fc40fe894bbb5022\",\"license\":\"MIT\"},\"contracts/TemplateStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./interfaces/ITemplateStore.sol\\\";\\r\\n\\r\\n\\r\\n/// @title The contract where request templates are stored\\r\\n/// @notice Most requests are repeated many times with the same parameters.\\r\\n/// This contract allows the requester to announce their parameters once, then\\r\\n/// refer to that announcement when they are making a request, instead of\\r\\n/// passing the same parameters repeatedly.\\r\\n/// @dev A template is composed of two groups of parameters. The first group is\\r\\n/// requester-agnostic (providerId, endpointInd, parameters), while the second\\r\\n/// group is requester-specific (requesterIndex, designatedWallet, fulfillAddress,\\r\\n/// fulfillFunctionId). Short requests refer to a template and use both of\\r\\n/// these groups of parameters. Regular requests refer to a template, but only\\r\\n/// use the requester-agnostic parameters of it, and require the client to\\r\\n/// provide the requester-specific parameters. In addition, both regular and\\r\\n/// short requests can overwrite parameters encoded in the parameters field of\\r\\n/// the template at request-time. See Airnode.sol for more information\\r\\n/// (specifically makeShortRequest() and makeRequest()).\\r\\ncontract TemplateStore is ITemplateStore {\\r\\n    struct Template {\\r\\n        bytes32 providerId;\\r\\n        bytes32 endpointId;\\r\\n        uint256 requesterIndex;\\r\\n        address designatedWallet;\\r\\n        address fulfillAddress;\\r\\n        bytes4 fulfillFunctionId;\\r\\n        bytes parameters;\\r\\n        }\\r\\n\\r\\n    mapping(bytes32 => Template) internal templates;\\r\\n\\r\\n\\r\\n    /// @notice Creates a request template with the given parameters,\\r\\n    /// addressable by the ID it returns\\r\\n    /// @dev A specific set of request parameters will always have\\r\\n    /// the same ID. This means a few things: (1) You can compute the expected\\r\\n    /// ID of a set of parameters off-chain, (2) creating a new template with\\r\\n    /// the same parameters will overwrite the old one and return the same\\r\\n    /// template ID, (3) after you query a template with its ID, you can verify\\r\\n    /// its integrity by applying the hash and comparing the result with the\\r\\n    /// ID.\\r\\n    /// @param providerId Provider ID from ProviderStore\\r\\n    /// @param endpointId Endpoint ID from EndpointStore\\r\\n    /// @param requesterIndex Requester index from RequesterStore\\r\\n    /// @param designatedWallet Designated wallet that is requested to fulfill\\r\\n    /// the request\\r\\n    /// @param fulfillAddress Address that will be called to fulfill\\r\\n    /// @param fulfillFunctionId Signature of the function that will be called\\r\\n    /// to fulfill\\r\\n    /// @param parameters Static request parameters (i.e., parameters that will\\r\\n    /// not change between requests, unlike the dynamic parameters determined\\r\\n    /// at runtime)\\r\\n    /// @return templateId Request template ID\\r\\n    function createTemplate(\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes calldata parameters\\r\\n        )\\r\\n        external\\r\\n        override\\r\\n        returns (bytes32 templateId)\\r\\n    {\\r\\n        templateId = keccak256(abi.encode(\\r\\n            providerId,\\r\\n            endpointId,\\r\\n            requesterIndex,\\r\\n            designatedWallet,\\r\\n            fulfillAddress,\\r\\n            fulfillFunctionId,\\r\\n            parameters\\r\\n            ));\\r\\n        templates[templateId] = Template({\\r\\n            providerId: providerId,\\r\\n            endpointId: endpointId,\\r\\n            requesterIndex: requesterIndex,\\r\\n            designatedWallet: designatedWallet,\\r\\n            fulfillAddress: fulfillAddress,\\r\\n            fulfillFunctionId: fulfillFunctionId,\\r\\n            parameters: parameters\\r\\n        });\\r\\n        emit TemplateCreated(\\r\\n          templateId,\\r\\n          providerId,\\r\\n          endpointId,\\r\\n          requesterIndex,\\r\\n          designatedWallet,\\r\\n          fulfillAddress,\\r\\n          fulfillFunctionId,\\r\\n          parameters\\r\\n          );\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves request parameters addressed by the ID\\r\\n    /// @param templateId Request template ID\\r\\n    /// @return providerId Provider ID from ProviderStore\\r\\n    /// @return endpointId Endpoint ID from EndpointStore\\r\\n    /// @return requesterIndex Requester index from RequesterStore\\r\\n    /// @return designatedWallet Designated wallet that is requested to fulfill\\r\\n    /// the request\\r\\n    /// @return fulfillAddress Address that will be called to fulfill\\r\\n    /// @return fulfillFunctionId Signature of the function that will be called\\r\\n    /// to fulfill\\r\\n    /// @return parameters Static request parameters (i.e., parameters that will\\r\\n    /// not change between requests, unlike the dynamic parameters determined\\r\\n    /// at runtime)\\r\\n    function getTemplate(bytes32 templateId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bytes32 providerId,\\r\\n            bytes32 endpointId,\\r\\n            uint256 requesterIndex,\\r\\n            address designatedWallet,\\r\\n            address fulfillAddress,\\r\\n            bytes4 fulfillFunctionId,\\r\\n            bytes memory parameters\\r\\n        )\\r\\n    {\\r\\n        providerId = templates[templateId].providerId;\\r\\n        endpointId = templates[templateId].endpointId;\\r\\n        requesterIndex = templates[templateId].requesterIndex;\\r\\n        designatedWallet = templates[templateId].designatedWallet;\\r\\n        fulfillAddress = templates[templateId].fulfillAddress;\\r\\n        fulfillFunctionId = templates[templateId].fulfillFunctionId;\\r\\n        parameters = templates[templateId].parameters;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xea5a586c83889f090208719b586baf5359e402f1d5eff0323ea6aa9a102c73ac\",\"license\":\"MIT\"},\"contracts/interfaces/IAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IEndpointStore.sol\\\";\\r\\nimport \\\"./ITemplateStore.sol\\\";\\r\\n\\r\\n\\r\\ninterface IAirnode is IEndpointStore, ITemplateStore {\\r\\n    event ClientRequestCreated(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 noRequests,\\r\\n        address clientAddress,\\r\\n        bytes32 templateId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes parameters\\r\\n        );\\r\\n\\r\\n    event ClientShortRequestCreated(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 noRequests,\\r\\n        address clientAddress,\\r\\n        bytes32 templateId,\\r\\n        bytes parameters\\r\\n        );\\r\\n\\r\\n    event ClientFullRequestCreated(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 noRequests,\\r\\n        address clientAddress,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes parameters\\r\\n        );\\r\\n\\r\\n    event ClientRequestFulfilled(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 statusCode,\\r\\n        bytes32 data\\r\\n        );\\r\\n\\r\\n    event ClientRequestFulfilledWithBytes(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 statusCode,\\r\\n        bytes data\\r\\n        );\\r\\n\\r\\n    event ClientRequestFailed(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed requestId\\r\\n        );\\r\\n\\r\\n    function makeRequest(\\r\\n        bytes32 templateId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes calldata parameters\\r\\n        )\\r\\n        external\\r\\n        returns (bytes32 requestId);\\r\\n\\r\\n    function makeShortRequest(\\r\\n        bytes32 templateId,\\r\\n        bytes calldata parameters\\r\\n        )\\r\\n        external\\r\\n        returns (bytes32 requestId);\\r\\n\\r\\n    function makeFullRequest(\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes calldata parameters\\r\\n        )\\r\\n        external\\r\\n        returns (bytes32 requestId);\\r\\n\\r\\n    function fulfill(\\r\\n        bytes32 requestId,\\r\\n        bytes32 providerId,\\r\\n        uint256 statusCode,\\r\\n        bytes32 data,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId\\r\\n        )\\r\\n        external\\r\\n        returns(\\r\\n            bool callSuccess,\\r\\n            bytes memory callData\\r\\n        );\\r\\n\\r\\n    function fulfillBytes(\\r\\n        bytes32 requestId,\\r\\n        bytes32 providerId,\\r\\n        uint256 statusCode,\\r\\n        bytes calldata data,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId\\r\\n        )\\r\\n        external\\r\\n        returns(\\r\\n            bool callSuccess,\\r\\n            bytes memory callData\\r\\n        );\\r\\n\\r\\n    function fail(\\r\\n        bytes32 requestId,\\r\\n        bytes32 providerId,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId\\r\\n        )\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0x2113a1f8984ce43449985748b7f14f5172f6af634221cbb6a0aa1b5754a5ab1d\",\"license\":\"MIT\"},\"contracts/interfaces/IEndpointStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IProviderStore.sol\\\";\\r\\n\\r\\n\\r\\ninterface IEndpointStore is IProviderStore {\\r\\n    event EndpointUpdated(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed endpointId,\\r\\n        address[] authorizers\\r\\n        );\\r\\n\\r\\n    function updateEndpointAuthorizers(\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId,\\r\\n        address[] calldata authorizers\\r\\n        )\\r\\n        external;\\r\\n\\r\\n    function getEndpointAuthorizers(\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId\\r\\n        )\\r\\n        external\\r\\n        view\\r\\n        returns(address[] memory authorizers);\\r\\n}\\r\\n\",\"keccak256\":\"0x87fbb9ee9e877b2c4be6b80f9f2636ff886cfa188b5554d1d4341ad1a78c2cf0\",\"license\":\"MIT\"},\"contracts/interfaces/IProviderStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IRequesterStore.sol\\\";\\r\\n\\r\\n\\r\\ninterface IProviderStore is IRequesterStore {\\r\\n    event ProviderCreated(\\r\\n        bytes32 indexed providerId,\\r\\n        address admin,\\r\\n        string xpub\\r\\n        );\\r\\n\\r\\n    event ProviderUpdated(\\r\\n        bytes32 indexed providerId,\\r\\n        address admin\\r\\n        );\\r\\n\\r\\n    event WithdrawalRequested(\\r\\n        bytes32 indexed providerId,\\r\\n        uint256 indexed requesterIndex,\\r\\n        bytes32 indexed withdrawalRequestId,\\r\\n        address designatedWallet,\\r\\n        address destination\\r\\n        );\\r\\n\\r\\n    event WithdrawalFulfilled(\\r\\n        bytes32 indexed providerId,\\r\\n        uint256 indexed requesterIndex,\\r\\n        bytes32 indexed withdrawalRequestId,\\r\\n        address designatedWallet,\\r\\n        address destination,\\r\\n        uint256 amount\\r\\n        );\\r\\n\\r\\n    function createProvider(\\r\\n        address admin,\\r\\n        string calldata xpub\\r\\n        )\\r\\n        external\\r\\n        payable\\r\\n        returns (bytes32 providerId);\\r\\n\\r\\n    function updateProvider(\\r\\n        bytes32 providerId,\\r\\n        address admin\\r\\n        )\\r\\n        external;\\r\\n\\r\\n    function requestWithdrawal(\\r\\n        bytes32 providerId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address destination\\r\\n    )\\r\\n        external;\\r\\n\\r\\n    function fulfillWithdrawal(\\r\\n        bytes32 withdrawalRequestId,\\r\\n        bytes32 providerId,\\r\\n        uint256 requesterIndex,\\r\\n        address destination\\r\\n        )\\r\\n        external\\r\\n        payable;\\r\\n\\r\\n    function getProvider(bytes32 providerId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address admin,\\r\\n            string memory xpub\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x5409ec157501fcdde0f057c7bf2a74dddfadecb0c7ccb4db20f8549e4295ef7b\",\"license\":\"MIT\"},\"contracts/interfaces/IRequesterStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n\\r\\ninterface IRequesterStore {\\r\\n    event RequesterCreated(\\r\\n        uint256 indexed requesterIndex,\\r\\n        address admin\\r\\n        );\\r\\n\\r\\n    event RequesterUpdated(\\r\\n        uint256 indexed requesterIndex,\\r\\n        address admin\\r\\n        );\\r\\n\\r\\n    event ClientEndorsementStatusUpdated(\\r\\n        uint256 indexed requesterIndex,\\r\\n        address indexed clientAddress,\\r\\n        bool endorsementStatus\\r\\n        );\\r\\n\\r\\n    function createRequester(address admin)\\r\\n        external\\r\\n        returns (uint256 requesterIndex);\\r\\n\\r\\n    function updateRequesterAdmin(\\r\\n        uint256 requesterIndex,\\r\\n        address admin\\r\\n        )\\r\\n        external;\\r\\n\\r\\n    function updateClientEndorsementStatus(\\r\\n        uint256 requesterIndex,\\r\\n        address clientAddress,\\r\\n        bool endorsementStatus\\r\\n        )\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0xedf526148dd6c85c998a280c95ece4255beec06d9eea0acd3dd4c12751d5f365\",\"license\":\"MIT\"},\"contracts/interfaces/ITemplateStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n\\r\\ninterface ITemplateStore {\\r\\n    event TemplateCreated(\\r\\n        bytes32 indexed templateId,\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes parameters\\r\\n        );\\r\\n\\r\\n    function createTemplate(\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes calldata parameters\\r\\n        )\\r\\n        external\\r\\n        returns (bytes32 templateId);\\r\\n\\r\\n    function getTemplate(bytes32 templateId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bytes32 providerId,\\r\\n            bytes32 endpointId,\\r\\n            uint256 requesterIndex,\\r\\n            address designatedWallet,\\r\\n            address fulfillAddress,\\r\\n            bytes4 fulfillFunctionId,\\r\\n            bytes memory parameters\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x820dc14d24ed9483f9cc71a5a7509842d8eae72534172a4584a3c415346b20df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160045534801561001557600080fd5b50613b7e806100256000396000f3fe6080604052600436106101405760003560e01c80639949f14b116100b6578063ef03808c1161006f578063ef03808c14610d47578063ef1aebd914610df4578063f0864e3714610e4f578063f3d354fa14610eaa578063fde19cf514610ef9578063fe0d4bf614610f5e57610140565b80639949f14b146109e3578063ba91edde14610a34578063bf0aa8c714610aa5578063c2534fce14610b2a578063dce9c27614610b8c578063dfd22ded14610cad57610140565b806333c0950a1161010857806333c0950a146103db57806334989ad0146104ac5780633b6cc28f146105c357806357225e1b1461062a5780635e886236146107995780639757739b146108ba57610140565b806327091153146101455780632b5dfc7e146101e95780632b70ec551461024e5780632edc5dc7146102e857806332ec107714610376575b600080fd5b34801561015157600080fd5b506101d36004803603604081101561016857600080fd5b81019080803590602001909291908035906020019064010000000081111561018f57600080fd5b8201836020820111156101a157600080fd5b803590602001918460018302840111640100000000831117156101c357600080fd5b9091929391929390505050611082565b6040518082815260200191505060405180910390f35b3480156101f557600080fd5b506102226004803603602081101561020c57600080fd5b810190808035906020019092919050505061143a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025a57600080fd5b506102e66004803603606081101561027157600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156102a257600080fd5b8201836020820111156102b457600080fd5b803590602001918460208302840111640100000000831117156102d657600080fd5b909192939192939050505061146d565b005b3480156102f457600080fd5b506103746004803603608081101561030b57600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506115e8565b005b34801561038257600080fd5b506103c56004803603602081101561039957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611784565b6040518082815260200191505060405180910390f35b3480156103e757600080fd5b50610414600480360360208110156103fe57600080fd5b8101908080359060200190929190505050611856565b604051808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610470578082015181840152602081019050610455565b50505050905090810190601f16801561049d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156104b857600080fd5b506105ad600480360360c08110156104cf57600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291908035906020019064010000000081111561056957600080fd5b82018360208201111561057b57600080fd5b8035906020019184600183028401116401000000008311171561059d57600080fd5b9091929391929390505050611949565b6040518082815260200191505060405180910390f35b3480156105cf57600080fd5b50610628600480360360608110156105e657600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611cfe565b005b34801561063657600080fd5b50610715600480360360c081101561064d57600080fd5b810190808035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561068857600080fd5b82018360208201111561069a57600080fd5b803590602001918460018302840111640100000000831117156106bc57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611f28565b60405180831515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561075d578082015181840152602081019050610742565b50505050905090810190601f16801561078a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156107a557600080fd5b506108a4600480360360e08110156107bc57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291908035906020019064010000000081111561086057600080fd5b82018360208201111561087257600080fd5b8035906020019184600183028401116401000000008311171561089457600080fd5b9091929391929390505050612246565b6040518082815260200191505060405180910390f35b3480156108c657600080fd5b506108f3600480360360208110156108dd57600080fd5b81019080803590602001909291905050506125c8565b604051808881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109a2578082015181840152602081019050610987565b50505050905090810190601f1680156109cf5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156109ef57600080fd5b50610a1c60048036036020811015610a0657600080fd5b8101908080359060200190929190505050612772565b60405180821515815260200191505060405180910390f35b348015610a4057600080fd5b50610a8d60048036036040811015610a5757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612792565b60405180821515815260200191505060405180910390f35b348015610ab157600080fd5b50610b2860048036036080811015610ac857600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127c1565b005b610b8a60048036036080811015610b4057600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a0e565b005b348015610b9857600080fd5b50610c97600480360360e0811015610baf57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919080359060200190640100000000811115610c5357600080fd5b820183602082011115610c6557600080fd5b80359060200191846001830284011164010000000083111715610c8757600080fd5b9091929391929390505050612c7c565b6040518082815260200191505060405180910390f35b348015610cb957600080fd5b50610cf060048036036040811015610cd057600080fd5b810190808035906020019092919080359060200190929190505050613016565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610d33578082015181840152602081019050610d18565b505050509050019250505060405180910390f35b610dde60048036036040811015610d5d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610d9a57600080fd5b820183602082011115610dac57600080fd5b80359060200191846001830284011164010000000083111715610dce57600080fd5b90919293919293905050506130c9565b6040518082815260200191505060405180910390f35b348015610e0057600080fd5b50610e4d60048036036040811015610e1757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613363565b005b348015610e5b57600080fd5b50610ea860048036036040811015610e7257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506134db565b005b348015610eb657600080fd5b50610ee360048036036020811015610ecd57600080fd5b810190808035906020019092919050505061365b565b6040518082815260200191505060405180910390f35b348015610f0557600080fd5b50610f4860048036036020811015610f1c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613673565b6040518082815260200191505060405180910390f35b348015610f6a57600080fd5b50610ffe600480360360c0811015610f8157600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061368b565b60405180831515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561104657808201518184015260208101905061102b565b50505050905090810190601f1680156110735780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b600080600860008681526020019081526020016000209050600160008260020154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661116e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f436c69656e74206e6f7420656e646f727365642062792072657175657374657281525060200191505060405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508033878787604051602001808681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050965050505050505060405160208183030381529060405280519060200120925081600001548260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460040160149054906101000a900460e01b604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004019450505050506040516020818303038152906040528051906020012060096000858152602001908152602001600020819055508260086000888152602001908152602001600020600001547ffcbcd5adb2d26ecd4ad50e6267e977fd479fcd0a6c82bde8eea85290ab3b46e683338a8a8a604051808681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050965050505050505060405180910390a3600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555050509392505050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b836005600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616c6c6572206973206e6f742070726f76696465722061646d696e0000000081525060200191505060405180910390fd5b82826007600088815260200190815260200160002060008781526020019081526020016000209190611578929190613950565b5083857fe5687475d94be4622dec0d6fa4db8686e003947facd485b0f4685954b8e93aa8858560405180806020018281038252848482818152602001925060200280828437600081840152601f19601f820116905080830192505050935050505060405180910390a35050505050565b83838383600083338484604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040194505050505060405160208183030381529060405280519060200120905060096000868152602001908152602001600020548114611708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f496e636f72726563742066756c66696c6c6d656e7420706172616d657465727381525060200191505060405180910390fd5b600960008a8152602001908152602001600020600090556001600a60008b815260200190815260200160002060006101000a81548160ff02191690831515021790555088887f1cfdd5ace64f15111ef8ed9df04364d0e9a9165cccf8386109347e54661ba3ad60405160405180910390a3505050505050505050565b6000600460008154809291906001019190505590508160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016003600083815260200190815260200160002081905550807f59e98f4c18a6c92efe8c23bcbd74f0d71e271eebf9a95f9edefdbee17c01f27083604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2919050565b600060606005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600560008481526020019081526020016000206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561193d5780601f106119125761010080835404028352916020019161193d565b820191906000526020600020905b81548152906001019060200180831161192057829003601f168201915b50505050509050915091565b60006001600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611a1b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f436c69656e74206e6f7420656e646f727365642062792072657175657374657281525060200191505060405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080338a8686604051602001808681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505096505050505050506040516020818303038152906040528051906020012091506000600860008b815260200190815260200160002060000154905080888888604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040194505050505060405160208183030381529060405280519060200120600960008581526020019081526020016000208190555082817faff6f5e5548953a11cbb1cfdd76562512f969b0eba0a2163f2420630d4dda97b84338e8e8e8e8e8e8e604051808a81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509a505050505050505050505060405180910390a3600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055505050979650505050505050565b8260008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611dd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616c6c6572206973206e6f74207265717565737465722061646d696e00000081525060200191505060405180910390fd5b818015611e1e57506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15611e69576001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b816001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847f8acbd28af1fec329994543393007c74ebc717caab62689ba09fbf938f015d3fc8460405180821515815260200191505060405180910390a350505050565b6000606088888585600083338484604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004019450505050506040516020818303038152906040528051906020012090506009600086815260200190815260200160002054811461204c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f496e636f72726563742066756c66696c6c6d656e7420706172616d657465727381525060200191505060405180910390fd5b600960008f8152602001908152602001600020600090558d8d7f0ebeb9b9b5c4baf915e7541c7e0919dd1a58eb06ee596035a50d08d20b9219de8e8e8e60405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a38873ffffffffffffffffffffffffffffffffffffffff16888f8e8e8e60405160240180858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106121c557805182526020820191506020810190506020830392506121a2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612227576040519150601f19603f3d011682016040523d82523d6000602084013e61222c565b606091505b508097508198505050505050505097509795505050505050565b60008888888888888888604051602001808981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505099505050505050505050506040516020818303038152906040528051906020012090506040518060e001604052808a81526020018981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506008600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548163ffffffff021916908360e01c021790555060c08201518160050190805190602001906124d99291906139f0565b50905050807ffa33b8597a1a83305d334562a90f8b4ce657e1b33c081423b6a44792d1cf41a48a8a8a8a8a8a8a8a604051808981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050995050505050505050505060405180910390a298975050505050505050565b60008060008060008060606008600089815260200190815260200160002060000154965060086000898152602001908152602001600020600101549550600860008981526020019081526020016000206002015494506008600089815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693506008600089815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506008600089815260200190815260200160002060040160149054906101000a900460e01b9150600860008981526020019081526020016000206005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127605780601f1061273557610100808354040283529160200191612760565b820191906000526020600020905b81548152906001019060200180831161274357829003601f168201915b50505050509050919395979092949650565b600a6020528060005260406000206000915054906101000a900460ff1681565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b8260008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616c6c6572206973206e6f74207265717565737465722061646d696e00000081525060200191505060405180910390fd5b6000600360008681526020019081526020016000206000815480929190600101919050558530604051602001808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019350505050604051602081830303815290604052805190602001209050600086868686604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019450505050506040516020818303038152906040528051906020012090508060066000848152602001908152602001600020819055508186887f3d0ebccb4fc9730699221da0180970852f595ed5c78781346149123cbbe9f1d38888604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a450505050505050565b600083833384604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140194505050505060405160208183030381529060405280519060200120905080600660008781526020019081526020016000205414612b0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4e6f2073756368207769746864726177616c207265717565737400000000000081525060200191505060405180910390fd5b60066000868152602001908152602001600020600090558483857f9e7b58b29aa3b972bb0f457499d0dfd00bf23905b0c3358fb864e7120402aefa338634604051808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a460008273ffffffffffffffffffffffffffffffffffffffff163460405180600001905060006040518083038185875af1925050503d8060008114612bf8576040519150601f19603f3d011682016040523d82523d6000602084013e612bfd565b606091505b5050905080612c74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5472616e73666572206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b505050505050565b60006001600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612d4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f436c69656e74206e6f7420656e646f727365642062792072657175657374657281525060200191505060405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080338a8686604051602001808681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050965050505050505060405160208183030381529060405280519060200120915089878787604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600401945050505050604051602081830303815290604052805190602001206009600084815260200190815260200160002081905550818a7f775e78a8e7375d14ad03d31edd0a27b29a055f732bca987abfe8082c16ed7e4483338d8d8d8d8d8d8d604051808a81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509a505050505050505050505060405180910390a3600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055505098975050505050505050565b60606007600084815260200190815260200160002060008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156130bc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613072575b5050505050905092915050565b600033604051602001808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405160208183030381529060405280519060200120905060405180604001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506005600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906131ef929190613a70565b50905050807f36ef18ad81b13124b66c80d27059d75bfadf09474c46aee8bb4ae998a921196d858585604051808473ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a2600034111561335c5760008473ffffffffffffffffffffffffffffffffffffffff163460405180600001905060006040518083038185875af1925050503d80600081146132de576040519150601f19603f3d011682016040523d82523d6000602084013e6132e3565b606091505b505090508061335a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5472616e73666572206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b505b9392505050565b8160008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616c6c6572206973206e6f74207265717565737465722061646d696e00000081525060200191505060405180910390fd5b8160008085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827fde26d3d8fc98a8dab0df21ef2146d313da1a060d635f3ce9b42adab32fa992aa83604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2505050565b816005600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146135b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616c6c6572206973206e6f742070726f76696465722061646d696e0000000081525060200191505060405180910390fd5b816005600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827fb7de80d002230ae37dd9e25804e78c41517296ad969a962ef5457be94cb8ac6e83604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2505050565b60036020528060005260406000206000915090505481565b60026020528060005260406000206000915090505481565b6000606087878585600083338484604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600401945050505050604051602081830303815290604052805190602001209050600960008681526020019081526020016000205481146137af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f496e636f72726563742066756c66696c6c6d656e7420706172616d657465727381525060200191505060405180910390fd5b600960008e8152602001908152602001600020600090558c8c7f1bdbe9e5d42a025a741fc3582eb3cad4ef61ac742d83cc87e545fbd481b926b58d8d604051808381526020018281526020019250505060405180910390a38873ffffffffffffffffffffffffffffffffffffffff16888e8d8d604051602401808481526020018381526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106138d057805182526020820191506020810190506020830392506138ad565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613932576040519150601f19603f3d011682016040523d82523d6000602084013e613937565b606091505b5080975081985050505050505050965096945050505050565b8280548282559060005260206000209081019282156139df579160200282015b828111156139de57823573ffffffffffffffffffffffffffffffffffffffff168260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613970565b5b5090506139ec9190613af0565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613a3157805160ff1916838001178555613a5f565b82800160010185558215613a5f579182015b82811115613a5e578251825591602001919060010190613a43565b5b509050613a6c9190613b2b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613ab157805160ff1916838001178555613adf565b82800160010185558215613adf579182015b82811115613ade578251825591602001919060010190613ac3565b5b509050613aec9190613b2b565b5090565b5b80821115613b2757600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101613af1565b5090565b5b80821115613b44576000816000905550600101613b2c565b509056fea2646970667358221220705b04fc8eb6a768684e24a6edfb9de58b31feba7940dd25e72fa326113a0b3264736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c80639949f14b116100b6578063ef03808c1161006f578063ef03808c14610d47578063ef1aebd914610df4578063f0864e3714610e4f578063f3d354fa14610eaa578063fde19cf514610ef9578063fe0d4bf614610f5e57610140565b80639949f14b146109e3578063ba91edde14610a34578063bf0aa8c714610aa5578063c2534fce14610b2a578063dce9c27614610b8c578063dfd22ded14610cad57610140565b806333c0950a1161010857806333c0950a146103db57806334989ad0146104ac5780633b6cc28f146105c357806357225e1b1461062a5780635e886236146107995780639757739b146108ba57610140565b806327091153146101455780632b5dfc7e146101e95780632b70ec551461024e5780632edc5dc7146102e857806332ec107714610376575b600080fd5b34801561015157600080fd5b506101d36004803603604081101561016857600080fd5b81019080803590602001909291908035906020019064010000000081111561018f57600080fd5b8201836020820111156101a157600080fd5b803590602001918460018302840111640100000000831117156101c357600080fd5b9091929391929390505050611082565b6040518082815260200191505060405180910390f35b3480156101f557600080fd5b506102226004803603602081101561020c57600080fd5b810190808035906020019092919050505061143a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025a57600080fd5b506102e66004803603606081101561027157600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156102a257600080fd5b8201836020820111156102b457600080fd5b803590602001918460208302840111640100000000831117156102d657600080fd5b909192939192939050505061146d565b005b3480156102f457600080fd5b506103746004803603608081101561030b57600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506115e8565b005b34801561038257600080fd5b506103c56004803603602081101561039957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611784565b6040518082815260200191505060405180910390f35b3480156103e757600080fd5b50610414600480360360208110156103fe57600080fd5b8101908080359060200190929190505050611856565b604051808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610470578082015181840152602081019050610455565b50505050905090810190601f16801561049d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156104b857600080fd5b506105ad600480360360c08110156104cf57600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291908035906020019064010000000081111561056957600080fd5b82018360208201111561057b57600080fd5b8035906020019184600183028401116401000000008311171561059d57600080fd5b9091929391929390505050611949565b6040518082815260200191505060405180910390f35b3480156105cf57600080fd5b50610628600480360360608110156105e657600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611cfe565b005b34801561063657600080fd5b50610715600480360360c081101561064d57600080fd5b810190808035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561068857600080fd5b82018360208201111561069a57600080fd5b803590602001918460018302840111640100000000831117156106bc57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611f28565b60405180831515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561075d578082015181840152602081019050610742565b50505050905090810190601f16801561078a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156107a557600080fd5b506108a4600480360360e08110156107bc57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291908035906020019064010000000081111561086057600080fd5b82018360208201111561087257600080fd5b8035906020019184600183028401116401000000008311171561089457600080fd5b9091929391929390505050612246565b6040518082815260200191505060405180910390f35b3480156108c657600080fd5b506108f3600480360360208110156108dd57600080fd5b81019080803590602001909291905050506125c8565b604051808881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109a2578082015181840152602081019050610987565b50505050905090810190601f1680156109cf5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156109ef57600080fd5b50610a1c60048036036020811015610a0657600080fd5b8101908080359060200190929190505050612772565b60405180821515815260200191505060405180910390f35b348015610a4057600080fd5b50610a8d60048036036040811015610a5757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612792565b60405180821515815260200191505060405180910390f35b348015610ab157600080fd5b50610b2860048036036080811015610ac857600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127c1565b005b610b8a60048036036080811015610b4057600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a0e565b005b348015610b9857600080fd5b50610c97600480360360e0811015610baf57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919080359060200190640100000000811115610c5357600080fd5b820183602082011115610c6557600080fd5b80359060200191846001830284011164010000000083111715610c8757600080fd5b9091929391929390505050612c7c565b6040518082815260200191505060405180910390f35b348015610cb957600080fd5b50610cf060048036036040811015610cd057600080fd5b810190808035906020019092919080359060200190929190505050613016565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610d33578082015181840152602081019050610d18565b505050509050019250505060405180910390f35b610dde60048036036040811015610d5d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610d9a57600080fd5b820183602082011115610dac57600080fd5b80359060200191846001830284011164010000000083111715610dce57600080fd5b90919293919293905050506130c9565b6040518082815260200191505060405180910390f35b348015610e0057600080fd5b50610e4d60048036036040811015610e1757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613363565b005b348015610e5b57600080fd5b50610ea860048036036040811015610e7257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506134db565b005b348015610eb657600080fd5b50610ee360048036036020811015610ecd57600080fd5b810190808035906020019092919050505061365b565b6040518082815260200191505060405180910390f35b348015610f0557600080fd5b50610f4860048036036020811015610f1c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613673565b6040518082815260200191505060405180910390f35b348015610f6a57600080fd5b50610ffe600480360360c0811015610f8157600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061368b565b60405180831515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561104657808201518184015260208101905061102b565b50505050905090810190601f1680156110735780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b600080600860008681526020019081526020016000209050600160008260020154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661116e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f436c69656e74206e6f7420656e646f727365642062792072657175657374657281525060200191505060405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508033878787604051602001808681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050965050505050505060405160208183030381529060405280519060200120925081600001548260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460040160149054906101000a900460e01b604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004019450505050506040516020818303038152906040528051906020012060096000858152602001908152602001600020819055508260086000888152602001908152602001600020600001547ffcbcd5adb2d26ecd4ad50e6267e977fd479fcd0a6c82bde8eea85290ab3b46e683338a8a8a604051808681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050965050505050505060405180910390a3600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555050509392505050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b836005600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616c6c6572206973206e6f742070726f76696465722061646d696e0000000081525060200191505060405180910390fd5b82826007600088815260200190815260200160002060008781526020019081526020016000209190611578929190613950565b5083857fe5687475d94be4622dec0d6fa4db8686e003947facd485b0f4685954b8e93aa8858560405180806020018281038252848482818152602001925060200280828437600081840152601f19601f820116905080830192505050935050505060405180910390a35050505050565b83838383600083338484604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040194505050505060405160208183030381529060405280519060200120905060096000868152602001908152602001600020548114611708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f496e636f72726563742066756c66696c6c6d656e7420706172616d657465727381525060200191505060405180910390fd5b600960008a8152602001908152602001600020600090556001600a60008b815260200190815260200160002060006101000a81548160ff02191690831515021790555088887f1cfdd5ace64f15111ef8ed9df04364d0e9a9165cccf8386109347e54661ba3ad60405160405180910390a3505050505050505050565b6000600460008154809291906001019190505590508160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016003600083815260200190815260200160002081905550807f59e98f4c18a6c92efe8c23bcbd74f0d71e271eebf9a95f9edefdbee17c01f27083604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2919050565b600060606005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600560008481526020019081526020016000206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561193d5780601f106119125761010080835404028352916020019161193d565b820191906000526020600020905b81548152906001019060200180831161192057829003601f168201915b50505050509050915091565b60006001600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611a1b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f436c69656e74206e6f7420656e646f727365642062792072657175657374657281525060200191505060405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080338a8686604051602001808681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505096505050505050506040516020818303038152906040528051906020012091506000600860008b815260200190815260200160002060000154905080888888604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040194505050505060405160208183030381529060405280519060200120600960008581526020019081526020016000208190555082817faff6f5e5548953a11cbb1cfdd76562512f969b0eba0a2163f2420630d4dda97b84338e8e8e8e8e8e8e604051808a81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509a505050505050505050505060405180910390a3600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055505050979650505050505050565b8260008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611dd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616c6c6572206973206e6f74207265717565737465722061646d696e00000081525060200191505060405180910390fd5b818015611e1e57506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15611e69576001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b816001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847f8acbd28af1fec329994543393007c74ebc717caab62689ba09fbf938f015d3fc8460405180821515815260200191505060405180910390a350505050565b6000606088888585600083338484604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004019450505050506040516020818303038152906040528051906020012090506009600086815260200190815260200160002054811461204c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f496e636f72726563742066756c66696c6c6d656e7420706172616d657465727381525060200191505060405180910390fd5b600960008f8152602001908152602001600020600090558d8d7f0ebeb9b9b5c4baf915e7541c7e0919dd1a58eb06ee596035a50d08d20b9219de8e8e8e60405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a38873ffffffffffffffffffffffffffffffffffffffff16888f8e8e8e60405160240180858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106121c557805182526020820191506020810190506020830392506121a2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612227576040519150601f19603f3d011682016040523d82523d6000602084013e61222c565b606091505b508097508198505050505050505097509795505050505050565b60008888888888888888604051602001808981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505099505050505050505050506040516020818303038152906040528051906020012090506040518060e001604052808a81526020018981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506008600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548163ffffffff021916908360e01c021790555060c08201518160050190805190602001906124d99291906139f0565b50905050807ffa33b8597a1a83305d334562a90f8b4ce657e1b33c081423b6a44792d1cf41a48a8a8a8a8a8a8a8a604051808981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050995050505050505050505060405180910390a298975050505050505050565b60008060008060008060606008600089815260200190815260200160002060000154965060086000898152602001908152602001600020600101549550600860008981526020019081526020016000206002015494506008600089815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693506008600089815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506008600089815260200190815260200160002060040160149054906101000a900460e01b9150600860008981526020019081526020016000206005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127605780601f1061273557610100808354040283529160200191612760565b820191906000526020600020905b81548152906001019060200180831161274357829003601f168201915b50505050509050919395979092949650565b600a6020528060005260406000206000915054906101000a900460ff1681565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b8260008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616c6c6572206973206e6f74207265717565737465722061646d696e00000081525060200191505060405180910390fd5b6000600360008681526020019081526020016000206000815480929190600101919050558530604051602001808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019350505050604051602081830303815290604052805190602001209050600086868686604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019450505050506040516020818303038152906040528051906020012090508060066000848152602001908152602001600020819055508186887f3d0ebccb4fc9730699221da0180970852f595ed5c78781346149123cbbe9f1d38888604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a450505050505050565b600083833384604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140194505050505060405160208183030381529060405280519060200120905080600660008781526020019081526020016000205414612b0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4e6f2073756368207769746864726177616c207265717565737400000000000081525060200191505060405180910390fd5b60066000868152602001908152602001600020600090558483857f9e7b58b29aa3b972bb0f457499d0dfd00bf23905b0c3358fb864e7120402aefa338634604051808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a460008273ffffffffffffffffffffffffffffffffffffffff163460405180600001905060006040518083038185875af1925050503d8060008114612bf8576040519150601f19603f3d011682016040523d82523d6000602084013e612bfd565b606091505b5050905080612c74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5472616e73666572206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b505050505050565b60006001600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612d4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f436c69656e74206e6f7420656e646f727365642062792072657175657374657281525060200191505060405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080338a8686604051602001808681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050965050505050505060405160208183030381529060405280519060200120915089878787604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600401945050505050604051602081830303815290604052805190602001206009600084815260200190815260200160002081905550818a7f775e78a8e7375d14ad03d31edd0a27b29a055f732bca987abfe8082c16ed7e4483338d8d8d8d8d8d8d604051808a81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509a505050505050505050505060405180910390a3600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055505098975050505050505050565b60606007600084815260200190815260200160002060008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156130bc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613072575b5050505050905092915050565b600033604051602001808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405160208183030381529060405280519060200120905060405180604001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506005600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906131ef929190613a70565b50905050807f36ef18ad81b13124b66c80d27059d75bfadf09474c46aee8bb4ae998a921196d858585604051808473ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a2600034111561335c5760008473ffffffffffffffffffffffffffffffffffffffff163460405180600001905060006040518083038185875af1925050503d80600081146132de576040519150601f19603f3d011682016040523d82523d6000602084013e6132e3565b606091505b505090508061335a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5472616e73666572206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b505b9392505050565b8160008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616c6c6572206973206e6f74207265717565737465722061646d696e00000081525060200191505060405180910390fd5b8160008085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827fde26d3d8fc98a8dab0df21ef2146d313da1a060d635f3ce9b42adab32fa992aa83604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2505050565b816005600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146135b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616c6c6572206973206e6f742070726f76696465722061646d696e0000000081525060200191505060405180910390fd5b816005600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827fb7de80d002230ae37dd9e25804e78c41517296ad969a962ef5457be94cb8ac6e83604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2505050565b60036020528060005260406000206000915090505481565b60026020528060005260406000206000915090505481565b6000606087878585600083338484604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600401945050505050604051602081830303815290604052805190602001209050600960008681526020019081526020016000205481146137af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f496e636f72726563742066756c66696c6c6d656e7420706172616d657465727381525060200191505060405180910390fd5b600960008e8152602001908152602001600020600090558c8c7f1bdbe9e5d42a025a741fc3582eb3cad4ef61ac742d83cc87e545fbd481b926b58d8d604051808381526020018281526020019250505060405180910390a38873ffffffffffffffffffffffffffffffffffffffff16888e8d8d604051602401808481526020018381526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106138d057805182526020820191506020810190506020830392506138ad565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613932576040519150601f19603f3d011682016040523d82523d6000602084013e613937565b606091505b5080975081985050505050505050965096945050505050565b8280548282559060005260206000209081019282156139df579160200282015b828111156139de57823573ffffffffffffffffffffffffffffffffffffffff168260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613970565b5b5090506139ec9190613af0565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613a3157805160ff1916838001178555613a5f565b82800160010185558215613a5f579182015b82811115613a5e578251825591602001919060010190613a43565b5b509050613a6c9190613b2b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613ab157805160ff1916838001178555613adf565b82800160010185558215613adf579182015b82811115613ade578251825591602001919060010190613ac3565b5b509050613aec9190613b2b565b5090565b5b80821115613b2757600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101613af1565b5090565b5b80821115613b44576000816000905550600101613b2c565b509056fea2646970667358221220705b04fc8eb6a768684e24a6edfb9de58b31feba7940dd25e72fa326113a0b3264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createProvider(address,string)": {
        "details": "The oracle node should calculate their providerId off-chain and retrieve its details with a getProvider() call. If the xpub is does not match, it should call this method to update the provider record. Note that the provider private key can be used to update admin through this method. This is allowed on purpose, as the provider private key is more privileged than the provider admin account.",
        "params": {
          "admin": "Provider admin",
          "xpub": "Master public key of the provider node"
        },
        "returns": {
          "providerId": "Provider ID"
        }
      },
      "createRequester(address)": {
        "params": {
          "admin": "Requester admin"
        },
        "returns": {
          "requesterIndex": "Requester index"
        }
      },
      "createTemplate(bytes32,bytes32,uint256,address,address,bytes4,bytes)": {
        "details": "A specific set of request parameters will always have the same ID. This means a few things: (1) You can compute the expected ID of a set of parameters off-chain, (2) creating a new template with the same parameters will overwrite the old one and return the same template ID, (3) after you query a template with its ID, you can verify its integrity by applying the hash and comparing the result with the ID.",
        "params": {
          "designatedWallet": "Designated wallet that is requested to fulfill the request",
          "endpointId": "Endpoint ID from EndpointStore",
          "fulfillAddress": "Address that will be called to fulfill",
          "fulfillFunctionId": "Signature of the function that will be called to fulfill",
          "parameters": "Static request parameters (i.e., parameters that will not change between requests, unlike the dynamic parameters determined at runtime)",
          "providerId": "Provider ID from ProviderStore",
          "requesterIndex": "Requester index from RequesterStore"
        },
        "returns": {
          "templateId": "Request template ID"
        }
      },
      "fail(bytes32,bytes32,address,bytes4)": {
        "details": "The oracle should fall back to this if a request cannot be fulfilled because fulfill() reverts",
        "params": {
          "fulfillAddress": "Address that will be called to fulfill",
          "fulfillFunctionId": "Signature of the function that will be called to fulfill",
          "providerId": "Provider ID from ProviderStore",
          "requestId": "Request ID"
        }
      },
      "fulfill(bytes32,bytes32,uint256,bytes32,address,bytes4)": {
        "params": {
          "data": "Fulfillment data",
          "fulfillAddress": "Address that will be called to fulfill",
          "fulfillFunctionId": "Signature of the function that will be called to fulfill",
          "providerId": "Provider ID from ProviderStore",
          "requestId": "Request ID",
          "statusCode": "Status code of the fulfillment"
        },
        "returns": {
          "callData": "Data returned by the fulfillment call (if there is any)",
          "callSuccess": "If the fulfillment call succeeded"
        }
      },
      "fulfillBytes(bytes32,bytes32,uint256,bytes,address,bytes4)": {
        "details": "The oracle uses this method to fulfill if the requester has specifically asked for a bytes type response",
        "params": {
          "data": "Fulfillment data of type bytes",
          "fulfillAddress": "Address that will be called to fulfill",
          "fulfillFunctionId": "Signature of the function that will be called to fulfill",
          "providerId": "Provider ID from ProviderStore",
          "requestId": "Request ID",
          "statusCode": "Status code of the fulfillment"
        },
        "returns": {
          "callData": "Data returned by the fulfillment call (if there is any)",
          "callSuccess": "If the fulfillment call succeeded"
        }
      },
      "fulfillWithdrawal(bytes32,bytes32,uint256,address)": {
        "details": "The oracle node sends the funds through this method to emit an event that indicates that the withdrawal request has been fulfilled",
        "params": {
          "destination": "Withdrawal destination",
          "providerId": "Provider ID",
          "requesterIndex": "Requester index from RequesterStore"
        }
      },
      "getEndpointAuthorizers(bytes32,bytes32)": {
        "params": {
          "endpointId": "Endpoint ID",
          "providerId": "Provider ID from ProviderStore"
        },
        "returns": {
          "authorizers": "Authorizer contract addresses"
        }
      },
      "getProvider(bytes32)": {
        "params": {
          "providerId": "Provider ID"
        },
        "returns": {
          "admin": "Provider admin",
          "xpub": "Master public key of the provider node"
        }
      },
      "getTemplate(bytes32)": {
        "params": {
          "templateId": "Request template ID"
        },
        "returns": {
          "designatedWallet": "Designated wallet that is requested to fulfill the request",
          "endpointId": "Endpoint ID from EndpointStore",
          "fulfillAddress": "Address that will be called to fulfill",
          "fulfillFunctionId": "Signature of the function that will be called to fulfill",
          "parameters": "Static request parameters (i.e., parameters that will not change between requests, unlike the dynamic parameters determined at runtime)",
          "providerId": "Provider ID from ProviderStore",
          "requesterIndex": "Requester index from RequesterStore"
        }
      },
      "makeFullRequest(bytes32,bytes32,uint256,address,address,bytes4,bytes)": {
        "details": "This is the least gas efficient way of making a request. Do not use it unless you have a good reason.",
        "params": {
          "designatedWallet": "Designated wallet that is requested to fulfill the request",
          "endpointId": "Endpoint ID from EndpointStore",
          "fulfillAddress": "Address that will be called to fulfill",
          "fulfillFunctionId": "Signature of the function that will be called to fulfill",
          "parameters": "All request parameters",
          "providerId": "Provider ID from ProviderStore",
          "requesterIndex": "Requester index from RequesterStore"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "makeRequest(bytes32,uint256,address,address,bytes4,bytes)": {
        "details": "This is the recommended way of making a request in most cases. Use makeShortRequest() if gas efficiency is critical.",
        "params": {
          "designatedWallet": "Designated wallet that is requested to fulfill the request",
          "fulfillAddress": "Address that will be called to fulfill",
          "fulfillFunctionId": "Signature of the function that will be called to fulfill",
          "parameters": "Dynamic request parameters (i.e., parameters that are determined at runtime, unlike the static parameters stored in the template)",
          "requesterIndex": "Requester index from RequesterStore",
          "templateId": "Template ID from TemplateStore"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "makeShortRequest(bytes32,bytes)": {
        "details": "Use this if gas efficiency is critical",
        "params": {
          "parameters": "Dynamic request parameters (i.e., parameters that are determined at runtime, unlike the static parameters stored in the template)",
          "templateId": "Template ID from TemplateStore"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "requestWithdrawal(bytes32,uint256,address,address)": {
        "details": "We do not need to use the withdrawal request parameters in the request ID hash to validate them at the node side because all of the parameters are used during fulfillment and will get validated on-chain.",
        "params": {
          "designatedWallet": "Designated wallet that the withdrawal is requested from",
          "destination": "Withdrawal destination",
          "providerId": "Provider ID",
          "requesterIndex": "Requester index from RequesterStore"
        }
      },
      "updateClientEndorsementStatus(uint256,address,bool)": {
        "details": "This is not provider specific, i.e., the requester allows the client's requests to be fulfilled through its designated wallets across all providers",
        "params": {
          "clientAddress": "Client address",
          "requesterIndex": "Requester index"
        }
      },
      "updateEndpointAuthorizers(bytes32,bytes32,address[])": {
        "params": {
          "authorizers": "Authorizer contract addresses",
          "endpointId": "Endpoint ID",
          "providerId": "Provider ID from ProviderStore"
        }
      },
      "updateProvider(bytes32,address)": {
        "params": {
          "admin": "Provider admin",
          "providerId": "Provider ID"
        }
      },
      "updateRequesterAdmin(uint256,address)": {
        "params": {
          "admin": "Requester admin",
          "requesterIndex": "Requester index"
        }
      }
    },
    "title": "The contract used to make and fulfill requests",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createProvider(address,string)": {
        "notice": "Allows the master wallet (m) of the provider to create a provider record on this chain"
      },
      "createRequester(address)": {
        "notice": "Creates a requester with the given parameters, addressable by the index it returns"
      },
      "createTemplate(bytes32,bytes32,uint256,address,address,bytes4,bytes)": {
        "notice": "Creates a request template with the given parameters, addressable by the ID it returns"
      },
      "fail(bytes32,bytes32,address,bytes4)": {
        "notice": "Called by the oracle node if a request cannot be fulfilled"
      },
      "fulfill(bytes32,bytes32,uint256,bytes32,address,bytes4)": {
        "notice": "Called by the oracle node to fulfill individual requests (including regular, short and full requests)"
      },
      "fulfillBytes(bytes32,bytes32,uint256,bytes,address,bytes4)": {
        "notice": "Called by the oracle node to fulfill individual requests (including regular, short and full requests) with a bytes type response"
      },
      "fulfillWithdrawal(bytes32,bytes32,uint256,address)": {
        "notice": "Called by the designated wallet to fulfill the withdrawal request made by the requester"
      },
      "getEndpointAuthorizers(bytes32,bytes32)": {
        "notice": "Retrieves the endpoint parameters addressed by the ID"
      },
      "getProvider(bytes32)": {
        "notice": "Retrieves provider parameters addressed by the ID"
      },
      "getTemplate(bytes32)": {
        "notice": "Retrieves request parameters addressed by the ID"
      },
      "makeFullRequest(bytes32,bytes32,uint256,address,address,bytes4,bytes)": {
        "notice": "Called by the requester to make a full request. A full request does not refer to a template, meaning that it passes all the parameters in the request. It does not require a template to be created beforehand, which provides extra flexibility compared to makeRequest() and makeShortRequest()."
      },
      "makeRequest(bytes32,uint256,address,address,bytes4,bytes)": {
        "notice": "Called by the client to make a regular request. A regular request refers to a template for the requester-agnostic parameters, but requires the client to provide the requester-specific parameters."
      },
      "makeShortRequest(bytes32,bytes)": {
        "notice": "Called by the requester to make a short request. A short request refers to a template, which the provider will use to get both requester-agnostic and requester-specific parameters"
      },
      "requestWithdrawal(bytes32,uint256,address,address)": {
        "notice": "Called by the requester admin to create a request for the provider to send the funds kept in their designated wallet to destination"
      },
      "updateClientEndorsementStatus(uint256,address,bool)": {
        "notice": "Called by the requester admin to endorse a client, i.e., allow a client to use its designated wallets"
      },
      "updateEndpointAuthorizers(bytes32,bytes32,address[])": {
        "notice": "Updates the endpoint authorizers of a provider"
      },
      "updateProvider(bytes32,address)": {
        "notice": "Updates the provider"
      },
      "updateRequesterAdmin(uint256,address)": {
        "notice": "Updates the requester admin"
      }
    },
    "notice": "Clients use this contract to make requests that follow a request-response scheme. In addition, it inherits from contracts that keep records of providers, requesters, endpoints, etc.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1264,
        "contract": "contracts/Airnode.sol:Airnode",
        "label": "requesterIndexToAdmin",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1270,
        "contract": "contracts/Airnode.sol:Airnode",
        "label": "requesterIndexToClientAddressToEndorsementStatus",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1274,
        "contract": "contracts/Airnode.sol:Airnode",
        "label": "clientAddressToNoRequests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1278,
        "contract": "contracts/Airnode.sol:Airnode",
        "label": "requesterIndexToNoWithdrawalRequests",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1281,
        "contract": "contracts/Airnode.sol:Airnode",
        "label": "noRequesters",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 998,
        "contract": "contracts/Airnode.sol:Airnode",
        "label": "providers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Provider)994_storage)"
      },
      {
        "astId": 1002,
        "contract": "contracts/Airnode.sol:Airnode",
        "label": "withdrawalRequestIdToParameters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 928,
        "contract": "contracts/Airnode.sol:Airnode",
        "label": "providerIdToEndpointIdToAuthorizers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 1424,
        "contract": "contracts/Airnode.sol:Airnode",
        "label": "templates",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Template)1420_storage)"
      },
      {
        "astId": 15,
        "contract": "contracts/Airnode.sol:Airnode",
        "label": "requestIdToFulfillmentParameters",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 19,
        "contract": "contracts/Airnode.sol:Airnode",
        "label": "requestWithIdHasFailed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Provider)994_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ProviderStore.Provider)",
        "numberOfBytes": "32",
        "value": "t_struct(Provider)994_storage"
      },
      "t_mapping(t_bytes32,t_struct(Template)1420_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TemplateStore.Template)",
        "numberOfBytes": "32",
        "value": "t_struct(Template)1420_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Provider)994_storage": {
        "encoding": "inplace",
        "label": "struct ProviderStore.Provider",
        "members": [
          {
            "astId": 991,
            "contract": "contracts/Airnode.sol:Airnode",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 993,
            "contract": "contracts/Airnode.sol:Airnode",
            "label": "xpub",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Template)1420_storage": {
        "encoding": "inplace",
        "label": "struct TemplateStore.Template",
        "members": [
          {
            "astId": 1407,
            "contract": "contracts/Airnode.sol:Airnode",
            "label": "providerId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1409,
            "contract": "contracts/Airnode.sol:Airnode",
            "label": "endpointId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1411,
            "contract": "contracts/Airnode.sol:Airnode",
            "label": "requesterIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1413,
            "contract": "contracts/Airnode.sol:Airnode",
            "label": "designatedWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1415,
            "contract": "contracts/Airnode.sol:Airnode",
            "label": "fulfillAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1417,
            "contract": "contracts/Airnode.sol:Airnode",
            "label": "fulfillFunctionId",
            "offset": 20,
            "slot": "4",
            "type": "t_bytes4"
          },
          {
            "astId": 1419,
            "contract": "contracts/Airnode.sol:Airnode",
            "label": "parameters",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}