{
  "address": "0x2f732Bb2E970046FB364e811FA738CD431599254",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_airnode",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "airnode",
      "outputs": [
        {
          "internalType": "contract IAirnode",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        }
      ],
      "name": "checkAuthorizationStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "requestIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "endpointIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "requesterIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "designatedWallets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "clientAddresses",
          "type": "address[]"
        }
      ],
      "name": "checkAuthorizationStatuses",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        }
      ],
      "name": "getProviderAndBlockNumber",
      "outputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "xpub",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "templateIds",
          "type": "bytes32[]"
        }
      ],
      "name": "getTemplates",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "providerIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "endpointIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "requesterIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "designatedWallets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "fulfillAddresses",
          "type": "address[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "fulfillFunctionIds",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes[]",
          "name": "parameters",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcfb6d498e3560e50c59d7a10678f59eb3558ceed0f8fcc566b899afd332c0071",
  "receipt": {
    "to": null,
    "from": "0x8b4f13604Afa0B8E8Fe0932dD3288F9cA508e53B",
    "contractAddress": "0x2f732Bb2E970046FB364e811FA738CD431599254",
    "transactionIndex": 1,
    "gasUsed": "1535629",
    "logsBloom": "0x
    "blockHash": "0x5f64535403e7f82a5fcc6fe0cfdf8e4575c67081f3b3300d41ee7e27d2a375f1",
    "transactionHash": "0xcfb6d498e3560e50c59d7a10678f59eb3558ceed0f8fcc566b899afd332c0071",
    "logs": [],
    "blockNumber": 6352867,
    "cumulativeGasUsed": "1666282",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAa66fC535021F32F6e5C91158B306d44a3CdA156"
  ],
  "solcInputHash": "899b63db06c6b38ac5752b9487ed15c1",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airnode\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"airnode\",\"outputs\":[{\"internalType\":\"contract IAirnode\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"checkAuthorizationStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"requestIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"endpointIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"requesterIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"designatedWallets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"clientAddresses\",\"type\":\"address[]\"}],\"name\":\"checkAuthorizationStatuses\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"}],\"name\":\"getProviderAndBlockNumber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"xpub\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"templateIds\",\"type\":\"bytes32[]\"}],\"name\":\"getTemplates\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"providerIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"endpointIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"requesterIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"designatedWallets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"fulfillAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"fulfillFunctionIds\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes[]\",\"name\":\"parameters\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkAuthorizationStatus(bytes32,bytes32,bytes32,uint256,address,address)\":{\"details\":\"Authorizer contracts are not trusted, so this method should only be called off-chain. The elements of the authorizer array are either addresses of Authorizer contracts with the interface defined in IAuthorizer or 0. Say we have authorizer contracts X, Y, Z, T, and our authorizer array is [X, Y, 0, Z, T]. This means that the requester should satisfy (X AND Y) OR (Z AND T) to be considered authorized. In other words, consequent authorizer contracts need to verify authorization simultaneously, while 0 represents the start of an independent authorization policy. From a logical standpoint, consequent authorizers get ANDed while 0 acts as an OR gate, providing great flexibility in forming an authorization policy out of simple building blocks. We could also define a NOT gate here to achieve a full set of universal logic gates, but that does not make much sense in this context because authorizers tend to check for positive conditions (have paid, is whitelisted, etc.) and we would not need policies that require these to be false. Note that authorizers should not start or end with 0, and 0s should not be used consecutively (e.g., [X, Y, 0, 0, Z, T]). [] returns false (deny everyone), [0] returns true (accept everyone).\",\"params\":{\"clientAddress\":\"Client address\",\"designatedWallet\":\"Designated wallet\",\"endpointId\":\"Endpoint ID from EndpointStore\",\"providerId\":\"Provider ID from ProviderStore\",\"requestId\":\"Request ID\",\"requesterIndex\":\"Requester index from RequesterStore\"},\"returns\":{\"status\":\"Authorization status of the request\"}},\"checkAuthorizationStatuses(bytes32,bytes32[],bytes32[],uint256[],address[],address[])\":{\"params\":{\"clientAddresses\":\"Client addresses\",\"designatedWallets\":\"Designated wallets\",\"endpointIds\":\"Endpoint IDs from EndpointStore\",\"providerId\":\"Provider ID from ProviderStore\",\"requestIds\":\"Request IDs\",\"requesterIndices\":\"Requester indices from RequesterStore\"},\"returns\":{\"statuses\":\"Authorization statuses of the request\"}},\"getProviderAndBlockNumber(bytes32)\":{\"params\":{\"providerId\":\"Provider ID\"},\"returns\":{\"admin\":\"Provider admin\",\"blockNumber\":\"Block number\",\"xpub\":\"Master public key of the provider node\"}},\"getTemplates(bytes32[])\":{\"params\":{\"templateIds\":\"Request template IDs\"},\"returns\":{\"designatedWallets\":\"Designated wallets that are requested to fulfill the request\",\"endpointIds\":\"Endpoint IDs from EndpointStore\",\"fulfillAddresses\":\"Addresses that will be called to fulfill\",\"fulfillFunctionIds\":\"Signatures of the functions that will be called to fulfill\",\"parameters\":\"Array of static request parameters (i.e., parameters that will not change between requests, unlike the dynamic parameters determined at runtime)\",\"providerIds\":\"Provider IDs from ProviderStore\",\"requesterIndices\":\"Requester indices from RequesterStore\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAuthorizationStatus(bytes32,bytes32,bytes32,uint256,address,address)\":{\"notice\":\"Uses the authorizer contracts of an endpoint of a provider to decide if a client contract is authorized to call the endpoint. Once an oracle node receives a request, it calls this method to determine if it should respond. Similarly, third parties can use this method to determine if a client contract is authorized to call an endpoint.\"},\"checkAuthorizationStatuses(bytes32,bytes32[],bytes32[],uint256[],address[],address[])\":{\"notice\":\"A convenience function to make multiple authorization status checks with a single call\"},\"getProviderAndBlockNumber(bytes32)\":{\"notice\":\"A convenience function to retrieve provider parameters and the block number with a single call\"},\"getTemplates(bytes32[])\":{\"notice\":\"A convenience function to retrieve multiple templates with a single call\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Convenience.sol\":\"Convenience\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Convenience.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./interfaces/IConvenience.sol\\\";\\r\\nimport \\\"./authorizers/interfaces/IAuthorizer.sol\\\";\\r\\nimport \\\"./interfaces/IAirnode.sol\\\";\\r\\n\\r\\n\\r\\ncontract Convenience is IConvenience {\\r\\n    IAirnode public airnode;\\r\\n\\r\\n\\r\\n    constructor (address _airnode)\\r\\n        public\\r\\n    {\\r\\n        airnode = IAirnode(_airnode);\\r\\n    }\\r\\n\\r\\n    /// @notice A convenience function to retrieve provider parameters and the\\r\\n    /// block number with a single call\\r\\n    /// @param providerId Provider ID\\r\\n    /// @return admin Provider admin\\r\\n    /// @return xpub Master public key of the provider node\\r\\n    /// @return blockNumber Block number\\r\\n    function getProviderAndBlockNumber(bytes32 providerId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            address admin,\\r\\n            string memory xpub,\\r\\n            uint256 blockNumber\\r\\n        )\\r\\n    {\\r\\n        (admin, xpub) = airnode.getProvider(providerId);\\r\\n        blockNumber = block.number;\\r\\n    }\\r\\n\\r\\n    /// @notice A convenience function to retrieve multiple templates with a\\r\\n    /// single call\\r\\n    /// @param templateIds Request template IDs\\r\\n    /// @return providerIds Provider IDs from ProviderStore\\r\\n    /// @return endpointIds Endpoint IDs from EndpointStore\\r\\n    /// @return requesterIndices Requester indices from RequesterStore\\r\\n    /// @return designatedWallets Designated wallets that are requested to\\r\\n    /// fulfill the request\\r\\n    /// @return fulfillAddresses Addresses that will be called to fulfill\\r\\n    /// @return fulfillFunctionIds Signatures of the functions that will be\\r\\n    /// called to fulfill\\r\\n    /// @return parameters Array of static request parameters (i.e., parameters\\r\\n    /// that will not change between requests, unlike the dynamic parameters\\r\\n    /// determined at runtime)\\r\\n    function getTemplates(bytes32[] calldata templateIds)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bytes32[] memory providerIds,\\r\\n            bytes32[] memory endpointIds,\\r\\n            uint256[] memory requesterIndices,\\r\\n            address[] memory designatedWallets,\\r\\n            address[] memory fulfillAddresses,\\r\\n            bytes4[] memory fulfillFunctionIds,\\r\\n            bytes[] memory parameters\\r\\n        )\\r\\n    {\\r\\n        providerIds = new bytes32[](templateIds.length);\\r\\n        endpointIds = new bytes32[](templateIds.length);\\r\\n        requesterIndices = new uint256[](templateIds.length);\\r\\n        designatedWallets = new address[](templateIds.length);\\r\\n        fulfillAddresses = new address[](templateIds.length);\\r\\n        fulfillFunctionIds = new bytes4[](templateIds.length);\\r\\n        parameters = new bytes[](templateIds.length);\\r\\n        for (uint256 ind = 0; ind < templateIds.length; ind++)\\r\\n        {\\r\\n            (\\r\\n                providerIds[ind],\\r\\n                endpointIds[ind],\\r\\n                requesterIndices[ind],\\r\\n                designatedWallets[ind],\\r\\n                fulfillAddresses[ind],\\r\\n                fulfillFunctionIds[ind],\\r\\n                parameters[ind]\\r\\n                ) = airnode.getTemplate(templateIds[ind]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Uses the authorizer contracts of an endpoint of a provider to\\r\\n    /// decide if a client contract is authorized to call the endpoint. Once an\\r\\n    /// oracle node receives a request, it calls this method to determine if it\\r\\n    /// should respond. Similarly, third parties can use this method to\\r\\n    /// determine if a client contract is authorized to call an endpoint.\\r\\n    /// @dev Authorizer contracts are not trusted, so this method should only\\r\\n    /// be called off-chain.\\r\\n    /// The elements of the authorizer array are either addresses of Authorizer\\r\\n    /// contracts with the interface defined in IAuthorizer or 0.\\r\\n    /// Say we have authorizer contracts X, Y, Z, T, and our authorizer\\r\\n    /// array is [X, Y, 0, Z, T]. This means that the requester should satisfy\\r\\n    /// (X AND Y) OR (Z AND T) to be considered authorized. In other words,\\r\\n    /// consequent authorizer contracts need to verify authorization\\r\\n    /// simultaneously, while 0 represents the start of an independent\\r\\n    /// authorization policy. From a logical standpoint, consequent authorizers\\r\\n    /// get ANDed while 0 acts as an OR gate, providing great flexibility in\\r\\n    /// forming an authorization policy out of simple building blocks. We could\\r\\n    /// also define a NOT gate here to achieve a full set of universal logic\\r\\n    /// gates, but that does not make much sense in this context because\\r\\n    /// authorizers tend to check for positive conditions (have paid, is\\r\\n    /// whitelisted, etc.) and we would not need policies that require these to\\r\\n    /// be false.\\r\\n    /// Note that authorizers should not start or end with 0, and 0s should\\r\\n    /// not be used consecutively (e.g., [X, Y, 0, 0, Z, T]).\\r\\n    /// [] returns false (deny everyone), [0] returns true (accept everyone).\\r\\n    /// @param providerId Provider ID from ProviderStore\\r\\n    /// @param requestId Request ID\\r\\n    /// @param endpointId Endpoint ID from EndpointStore\\r\\n    /// @param requesterIndex Requester index from RequesterStore\\r\\n    /// @param designatedWallet Designated wallet\\r\\n    /// @param clientAddress Client address\\r\\n    /// @return status Authorization status of the request\\r\\n    function checkAuthorizationStatus(\\r\\n        bytes32 providerId,\\r\\n        bytes32 requestId,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address clientAddress\\r\\n        )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns(bool status)\\r\\n    {\\r\\n        address[] memory authorizers = airnode.getEndpointAuthorizers(providerId, endpointId);  \\r\\n        uint256 noAuthorizers = authorizers.length;\\r\\n        // If no authorizers have been set, deny access by default\\r\\n        if (noAuthorizers == 0)\\r\\n        {\\r\\n            return false;\\r\\n        }\\r\\n        // authorizedByAll will remain true as long as none of the authorizers\\r\\n        // in a group reports that the client is unauthorized\\r\\n        bool authorizedByAll = true;\\r\\n        for (uint256 ind = 0; ind < noAuthorizers; ind++)\\r\\n        {\\r\\n            address authorizerAddress = authorizers[ind];\\r\\n            if (authorizerAddress == address(0)) {\\r\\n                // If we have reached a 0 without getting any unauthorized\\r\\n                // reports, we can return true\\r\\n                if (authorizedByAll) {\\r\\n                    return true;\\r\\n                }\\r\\n                // Otherwise, reset authorizedByAll and start checking the next\\r\\n                // group\\r\\n                authorizedByAll = true;\\r\\n            }\\r\\n            // We only need to check the next authorizer if we have a good track\\r\\n            // record for this group\\r\\n            else if (authorizedByAll) {\\r\\n                IAuthorizer authorizer = IAuthorizer(authorizerAddress);\\r\\n                // Set authorizedByAll to false if we got an unauthorized report.\\r\\n                // This means that we will not be able to return a true from\\r\\n                // this group of authorizers.\\r\\n                if (!authorizer.checkIfAuthorized(\\r\\n                    requestId, providerId, endpointId, requesterIndex, designatedWallet, clientAddress\\r\\n                    )) {\\r\\n                    authorizedByAll = false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // Finally, if we have reached the end of the authorizers (i.e., we\\r\\n        // are at the last element of the last group), just return the current\\r\\n        // authorizedByAll, which will only be true if all authorizers from the\\r\\n        // last group have returned true.\\r\\n        return authorizedByAll;\\r\\n    }\\r\\n\\r\\n    /// @notice A convenience function to make multiple authorization status\\r\\n    /// checks with a single call\\r\\n    /// @param providerId Provider ID from ProviderStore\\r\\n    /// @param requestIds Request IDs\\r\\n    /// @param endpointIds Endpoint IDs from EndpointStore\\r\\n    /// @param requesterIndices Requester indices from RequesterStore\\r\\n    /// @param designatedWallets Designated wallets\\r\\n    /// @param clientAddresses Client addresses\\r\\n    /// @return statuses Authorization statuses of the request\\r\\n    function checkAuthorizationStatuses(\\r\\n        bytes32 providerId,\\r\\n        bytes32[] calldata requestIds,\\r\\n        bytes32[] calldata endpointIds,\\r\\n        uint256[] calldata requesterIndices,\\r\\n        address[] calldata designatedWallets,\\r\\n        address[] calldata clientAddresses\\r\\n        )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool[] memory statuses)\\r\\n    {\\r\\n        require(\\r\\n            requestIds.length == endpointIds.length\\r\\n                && requestIds.length == requesterIndices.length\\r\\n                && requestIds.length == designatedWallets.length\\r\\n                && requestIds.length == clientAddresses.length,\\r\\n            \\\"Parameter lengths must be equal\\\"\\r\\n        );\\r\\n        statuses = new bool[](requestIds.length);\\r\\n        for (uint256 ind = 0; ind < requestIds.length; ind++)\\r\\n        {\\r\\n            statuses[ind] = checkAuthorizationStatus(\\r\\n                providerId,\\r\\n                requestIds[ind],\\r\\n                endpointIds[ind],\\r\\n                requesterIndices[ind],\\r\\n                designatedWallets[ind],\\r\\n                clientAddresses[ind]\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x65dbd8fb6a015367e89dd0779ce73e5a988c6d5c9b21ea7975f4a2c21a149275\",\"license\":\"MIT\"},\"contracts/authorizers/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n\\r\\ninterface IAuthorizer {\\r\\n    function checkIfAuthorized(\\r\\n        bytes32 requestId,\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address clientAddress\\r\\n        )\\r\\n        external\\r\\n        view\\r\\n        returns (bool status);\\r\\n}\\r\\n\",\"keccak256\":\"0x6a1320938e391601e23602a13c3d11460d3229e23417aedc6253593ae5a7cd1f\",\"license\":\"MIT\"},\"contracts/interfaces/IAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IEndpointStore.sol\\\";\\r\\nimport \\\"./ITemplateStore.sol\\\";\\r\\n\\r\\n\\r\\ninterface IAirnode is IEndpointStore, ITemplateStore {\\r\\n    event ClientRequestCreated(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 noRequests,\\r\\n        address clientAddress,\\r\\n        bytes32 templateId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes parameters\\r\\n        );\\r\\n\\r\\n    event ClientShortRequestCreated(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 noRequests,\\r\\n        address clientAddress,\\r\\n        bytes32 templateId,\\r\\n        bytes parameters\\r\\n        );\\r\\n\\r\\n    event ClientFullRequestCreated(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 noRequests,\\r\\n        address clientAddress,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes parameters\\r\\n        );\\r\\n\\r\\n    event ClientRequestFulfilled(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 statusCode,\\r\\n        bytes32 data\\r\\n        );\\r\\n\\r\\n    event ClientRequestFulfilledWithBytes(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 statusCode,\\r\\n        bytes data\\r\\n        );\\r\\n\\r\\n    event ClientRequestFailed(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed requestId\\r\\n        );\\r\\n\\r\\n    function makeRequest(\\r\\n        bytes32 templateId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes calldata parameters\\r\\n        )\\r\\n        external\\r\\n        returns (bytes32 requestId);\\r\\n\\r\\n    function makeShortRequest(\\r\\n        bytes32 templateId,\\r\\n        bytes calldata parameters\\r\\n        )\\r\\n        external\\r\\n        returns (bytes32 requestId);\\r\\n\\r\\n    function makeFullRequest(\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes calldata parameters\\r\\n        )\\r\\n        external\\r\\n        returns (bytes32 requestId);\\r\\n\\r\\n    function fulfill(\\r\\n        bytes32 requestId,\\r\\n        bytes32 providerId,\\r\\n        uint256 statusCode,\\r\\n        bytes32 data,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId\\r\\n        )\\r\\n        external\\r\\n        returns(\\r\\n            bool callSuccess,\\r\\n            bytes memory callData\\r\\n        );\\r\\n\\r\\n    function fulfillBytes(\\r\\n        bytes32 requestId,\\r\\n        bytes32 providerId,\\r\\n        uint256 statusCode,\\r\\n        bytes calldata data,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId\\r\\n        )\\r\\n        external\\r\\n        returns(\\r\\n            bool callSuccess,\\r\\n            bytes memory callData\\r\\n        );\\r\\n\\r\\n    function fail(\\r\\n        bytes32 requestId,\\r\\n        bytes32 providerId,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId\\r\\n        )\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0x2113a1f8984ce43449985748b7f14f5172f6af634221cbb6a0aa1b5754a5ab1d\",\"license\":\"MIT\"},\"contracts/interfaces/IConvenience.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IAirnode.sol\\\";\\r\\n\\r\\n\\r\\ninterface IConvenience {\\r\\n    function getProviderAndBlockNumber(bytes32 providerId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address admin,\\r\\n            string memory xpub,\\r\\n            uint256 blockNumber\\r\\n        );\\r\\n\\r\\n    function getTemplates(bytes32[] calldata templateIds)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bytes32[] memory providerIds,\\r\\n            bytes32[] memory endpointIds,\\r\\n            uint256[] memory requesterIndices,\\r\\n            address[] memory designatedWallets,\\r\\n            address[] memory fulfillAddresses,\\r\\n            bytes4[] memory fulfillFunctionIds,\\r\\n            bytes[] memory parameters\\r\\n        );\\r\\n\\r\\n    function checkAuthorizationStatus(\\r\\n        bytes32 providerId,\\r\\n        bytes32 requestId,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address clientAddress\\r\\n        )\\r\\n        external\\r\\n        view\\r\\n        returns(bool status);\\r\\n\\r\\n    function checkAuthorizationStatuses(\\r\\n        bytes32 providerId,\\r\\n        bytes32[] calldata requestIds, \\r\\n        bytes32[] calldata endpointIds,\\r\\n        uint256[] calldata requesterIndices,\\r\\n        address[] calldata designatedWallets,\\r\\n        address[] calldata clientAddresses\\r\\n        )\\r\\n        external\\r\\n        view\\r\\n        returns (bool[] memory statuses);\\r\\n}\\r\\n\",\"keccak256\":\"0xc24bda55cf33ebfdc8e7d582714e3c99f2c0d19526729d69ff6cbabb05a9e65d\",\"license\":\"MIT\"},\"contracts/interfaces/IEndpointStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IProviderStore.sol\\\";\\r\\n\\r\\n\\r\\ninterface IEndpointStore is IProviderStore {\\r\\n    event EndpointUpdated(\\r\\n        bytes32 indexed providerId,\\r\\n        bytes32 indexed endpointId,\\r\\n        address[] authorizers\\r\\n        );\\r\\n\\r\\n    function updateEndpointAuthorizers(\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId,\\r\\n        address[] calldata authorizers\\r\\n        )\\r\\n        external;\\r\\n\\r\\n    function getEndpointAuthorizers(\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId\\r\\n        )\\r\\n        external\\r\\n        view\\r\\n        returns(address[] memory authorizers);\\r\\n}\\r\\n\",\"keccak256\":\"0x87fbb9ee9e877b2c4be6b80f9f2636ff886cfa188b5554d1d4341ad1a78c2cf0\",\"license\":\"MIT\"},\"contracts/interfaces/IProviderStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IRequesterStore.sol\\\";\\r\\n\\r\\n\\r\\ninterface IProviderStore is IRequesterStore {\\r\\n    event ProviderCreated(\\r\\n        bytes32 indexed providerId,\\r\\n        address admin,\\r\\n        string xpub\\r\\n        );\\r\\n\\r\\n    event ProviderUpdated(\\r\\n        bytes32 indexed providerId,\\r\\n        address admin\\r\\n        );\\r\\n\\r\\n    event WithdrawalRequested(\\r\\n        bytes32 indexed providerId,\\r\\n        uint256 indexed requesterIndex,\\r\\n        bytes32 indexed withdrawalRequestId,\\r\\n        address designatedWallet,\\r\\n        address destination\\r\\n        );\\r\\n\\r\\n    event WithdrawalFulfilled(\\r\\n        bytes32 indexed providerId,\\r\\n        uint256 indexed requesterIndex,\\r\\n        bytes32 indexed withdrawalRequestId,\\r\\n        address designatedWallet,\\r\\n        address destination,\\r\\n        uint256 amount\\r\\n        );\\r\\n\\r\\n    function createProvider(\\r\\n        address admin,\\r\\n        string calldata xpub\\r\\n        )\\r\\n        external\\r\\n        payable\\r\\n        returns (bytes32 providerId);\\r\\n\\r\\n    function updateProvider(\\r\\n        bytes32 providerId,\\r\\n        address admin\\r\\n        )\\r\\n        external;\\r\\n\\r\\n    function requestWithdrawal(\\r\\n        bytes32 providerId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address destination\\r\\n    )\\r\\n        external;\\r\\n\\r\\n    function fulfillWithdrawal(\\r\\n        bytes32 withdrawalRequestId,\\r\\n        bytes32 providerId,\\r\\n        uint256 requesterIndex,\\r\\n        address destination\\r\\n        )\\r\\n        external\\r\\n        payable;\\r\\n\\r\\n    function getProvider(bytes32 providerId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address admin,\\r\\n            string memory xpub\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x5409ec157501fcdde0f057c7bf2a74dddfadecb0c7ccb4db20f8549e4295ef7b\",\"license\":\"MIT\"},\"contracts/interfaces/IRequesterStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n\\r\\ninterface IRequesterStore {\\r\\n    event RequesterCreated(\\r\\n        uint256 indexed requesterIndex,\\r\\n        address admin\\r\\n        );\\r\\n\\r\\n    event RequesterUpdated(\\r\\n        uint256 indexed requesterIndex,\\r\\n        address admin\\r\\n        );\\r\\n\\r\\n    event ClientEndorsementStatusUpdated(\\r\\n        uint256 indexed requesterIndex,\\r\\n        address indexed clientAddress,\\r\\n        bool endorsementStatus\\r\\n        );\\r\\n\\r\\n    function createRequester(address admin)\\r\\n        external\\r\\n        returns (uint256 requesterIndex);\\r\\n\\r\\n    function updateRequesterAdmin(\\r\\n        uint256 requesterIndex,\\r\\n        address admin\\r\\n        )\\r\\n        external;\\r\\n\\r\\n    function updateClientEndorsementStatus(\\r\\n        uint256 requesterIndex,\\r\\n        address clientAddress,\\r\\n        bool endorsementStatus\\r\\n        )\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0xedf526148dd6c85c998a280c95ece4255beec06d9eea0acd3dd4c12751d5f365\",\"license\":\"MIT\"},\"contracts/interfaces/ITemplateStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n\\r\\ninterface ITemplateStore {\\r\\n    event TemplateCreated(\\r\\n        bytes32 indexed templateId,\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes parameters\\r\\n        );\\r\\n\\r\\n    function createTemplate(\\r\\n        bytes32 providerId,\\r\\n        bytes32 endpointId,\\r\\n        uint256 requesterIndex,\\r\\n        address designatedWallet,\\r\\n        address fulfillAddress,\\r\\n        bytes4 fulfillFunctionId,\\r\\n        bytes calldata parameters\\r\\n        )\\r\\n        external\\r\\n        returns (bytes32 templateId);\\r\\n\\r\\n    function getTemplate(bytes32 templateId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bytes32 providerId,\\r\\n            bytes32 endpointId,\\r\\n            uint256 requesterIndex,\\r\\n            address designatedWallet,\\r\\n            address fulfillAddress,\\r\\n            bytes4 fulfillFunctionId,\\r\\n            bytes memory parameters\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x820dc14d24ed9483f9cc71a5a7509842d8eae72534172a4584a3c415346b20df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001b8238038062001b82833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200010f565b6000815190506200008f81620000f5565b92915050565b600060208284031215620000a857600080fd5b6000620000b8848285016200007e565b91505092915050565b6000620000ce82620000d5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200010081620000c1565b81146200010c57600080fd5b50565b611a63806200011f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806376428c9b1461005c578063824240d114610092578063a36ff4d8146100c4578063ccd76101146100e2578063d760710614610112575b600080fd5b61007660048036038101906100719190610d90565b610142565b60405161008997969594939291906114fe565b60405180910390f35b6100ac60048036038101906100a79190610dfe565b61058b565b6040516100bb9392919061149e565b60405180910390f35b6100cc610652565b6040516100d9919061165e565b60405180910390f35b6100fc60048036038101906100f79190610f40565b610676565b604051610109919061159e565b60405180910390f35b61012c60048036038101906101279190610e27565b61088b565b60405161013991906114dc565b60405180910390f35b60608060608060608060608888905067ffffffffffffffff8111801561016757600080fd5b506040519080825280602002602001820160405280156101965781602001602082028036833780820191505090505b5096508888905067ffffffffffffffff811180156101b357600080fd5b506040519080825280602002602001820160405280156101e25781602001602082028036833780820191505090505b5095508888905067ffffffffffffffff811180156101ff57600080fd5b5060405190808252806020026020018201604052801561022e5781602001602082028036833780820191505090505b5094508888905067ffffffffffffffff8111801561024b57600080fd5b5060405190808252806020026020018201604052801561027a5781602001602082028036833780820191505090505b5093508888905067ffffffffffffffff8111801561029757600080fd5b506040519080825280602002602001820160405280156102c65781602001602082028036833780820191505090505b5092508888905067ffffffffffffffff811180156102e357600080fd5b506040519080825280602002602001820160405280156103125781602001602082028036833780820191505090505b5091508888905067ffffffffffffffff8111801561032f57600080fd5b5060405190808252806020026020018201604052801561036357816020015b606081526020019060019003908161034e5790505b50905060005b8989905081101561057e5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639757739b8b8b848181106103bc57fe5b905060200201356040518263ffffffff1660e01b81526004016103df91906115b9565b60006040518083038186803b1580156103f757600080fd5b505afa15801561040b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104349190610fc9565b8e888151811061044057fe5b602002602001018e898151811061045357fe5b602002602001018e8a8151811061046657fe5b602002602001018e8b8151811061047957fe5b602002602001018e8c8151811061048c57fe5b602002602001018e8d8151811061049f57fe5b602002602001018e8e815181106104b257fe5b60200260200101879052877bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152508773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152508773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250878152508781525087815250505050505050508080600101915050610369565b5092959891949750929550565b6000606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166333c0950a856040518263ffffffff1660e01b81526004016105eb91906115b9565b60006040518083038186803b15801561060357600080fd5b505afa158015610617573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106409190610cfb565b80935081945050504390509193909250565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dfd22ded89886040518363ffffffff1660e01b81526004016106d59291906115d4565b60006040518083038186803b1580156106ed57600080fd5b505afa158015610701573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061072a9190610d4f565b9050600081519050600081141561074657600092505050610881565b60006001905060005b8281101561087957600084828151811061076557fe5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107c15782156107b857600195505050505050610881565b6001925061086b565b821561086a5760008190508073ffffffffffffffffffffffffffffffffffffffff16639bb014288d8f8e8e8e8e6040518763ffffffff1660e01b815260040161080f969594939291906115fd565b60206040518083038186803b15801561082757600080fd5b505afa15801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f9190610dd5565b61086857600093505b505b5b50808060010191505061074f565b508093505050505b9695505050505050565b6060888890508b8b90501480156108a75750868690508b8b9050145b80156108b85750848490508b8b9050145b80156108c95750828290508b8b9050145b610908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ff90611679565b60405180910390fd5b8a8a905067ffffffffffffffff8111801561092257600080fd5b506040519080825280602002602001820160405280156109515781602001602082028036833780820191505090505b50905060005b8b8b9050811015610a11576109e68d8d8d8481811061097257fe5b905060200201358c8c8581811061098557fe5b905060200201358b8b8681811061099857fe5b905060200201358a8a878181106109ab57fe5b90506020020160208101906109c09190610cd2565b8989888181106109cc57fe5b90506020020160208101906109e19190610cd2565b610676565b8282815181106109f257fe5b6020026020010190151590811515815250508080600101915050610957565b509b9a5050505050505050505050565b600081359050610a30816119ba565b92915050565b600081519050610a45816119ba565b92915050565b60008083601f840112610a5d57600080fd5b8235905067ffffffffffffffff811115610a7657600080fd5b602083019150836020820283011115610a8e57600080fd5b9250929050565b600082601f830112610aa657600080fd5b8151610ab9610ab4826116c6565b611699565b91508181835260208401935060208101905083856020840282011115610ade57600080fd5b60005b83811015610b0e5781610af48882610a36565b845260208401935060208301925050600181019050610ae1565b5050505092915050565b60008083601f840112610b2a57600080fd5b8235905067ffffffffffffffff811115610b4357600080fd5b602083019150836020820283011115610b5b57600080fd5b9250929050565b60008083601f840112610b7457600080fd5b8235905067ffffffffffffffff811115610b8d57600080fd5b602083019150836020820283011115610ba557600080fd5b9250929050565b600081519050610bbb816119d1565b92915050565b600081359050610bd0816119e8565b92915050565b600081519050610be5816119e8565b92915050565b600081519050610bfa816119ff565b92915050565b600082601f830112610c1157600080fd5b8151610c24610c1f826116ee565b611699565b91508082526020830160208301858383011115610c4057600080fd5b610c4b838284611976565b50505092915050565b600082601f830112610c6557600080fd5b8151610c78610c738261171a565b611699565b91508082526020830160208301858383011115610c9457600080fd5b610c9f838284611976565b50505092915050565b600081359050610cb781611a16565b92915050565b600081519050610ccc81611a16565b92915050565b600060208284031215610ce457600080fd5b6000610cf284828501610a21565b91505092915050565b60008060408385031215610d0e57600080fd5b6000610d1c85828601610a36565b925050602083015167ffffffffffffffff811115610d3957600080fd5b610d4585828601610c54565b9150509250929050565b600060208284031215610d6157600080fd5b600082015167ffffffffffffffff811115610d7b57600080fd5b610d8784828501610a95565b91505092915050565b60008060208385031215610da357600080fd5b600083013567ffffffffffffffff811115610dbd57600080fd5b610dc985828601610b18565b92509250509250929050565b600060208284031215610de757600080fd5b6000610df584828501610bac565b91505092915050565b600060208284031215610e1057600080fd5b6000610e1e84828501610bc1565b91505092915050565b600080600080600080600080600080600060c08c8e031215610e4857600080fd5b6000610e568e828f01610bc1565b9b505060208c013567ffffffffffffffff811115610e7357600080fd5b610e7f8e828f01610b18565b9a509a505060408c013567ffffffffffffffff811115610e9e57600080fd5b610eaa8e828f01610b18565b985098505060608c013567ffffffffffffffff811115610ec957600080fd5b610ed58e828f01610b62565b965096505060808c013567ffffffffffffffff811115610ef457600080fd5b610f008e828f01610a4b565b945094505060a08c013567ffffffffffffffff811115610f1f57600080fd5b610f2b8e828f01610a4b565b92509250509295989b509295989b9093969950565b60008060008060008060c08789031215610f5957600080fd5b6000610f6789828a01610bc1565b9650506020610f7889828a01610bc1565b9550506040610f8989828a01610bc1565b9450506060610f9a89828a01610ca8565b9350506080610fab89828a01610a21565b92505060a0610fbc89828a01610a21565b9150509295509295509295565b600080600080600080600060e0888a031215610fe457600080fd5b6000610ff28a828b01610bd6565b97505060206110038a828b01610bd6565b96505060406110148a828b01610cbd565b95505060606110258a828b01610a36565b94505060806110368a828b01610a36565b93505060a06110478a828b01610beb565b92505060c088015167ffffffffffffffff81111561106457600080fd5b6110708a828b01610c00565b91505092959891949750929550565b600061108b838361110b565b60208301905092915050565b60006110a38383611374565b60208301905092915050565b60006110bb8383611392565b60208301905092915050565b60006110d383836113b0565b60208301905092915050565b60006110eb83836113bf565b905092915050565b60006110ff8383611480565b60208301905092915050565b611114816118d4565b82525050565b611123816118d4565b82525050565b6000611134826117a6565b61113e818561184c565b935061114983611746565b8060005b8381101561117a578151611161888261107f565b975061116c836117fe565b92505060018101905061114d565b5085935050505092915050565b6000611192826117b1565b61119c818561185d565b93506111a783611756565b8060005b838110156111d85781516111bf8882611097565b97506111ca8361180b565b9250506001810190506111ab565b5085935050505092915050565b60006111f0826117bc565b6111fa818561186e565b935061120583611766565b8060005b8381101561123657815161121d88826110af565b975061122883611818565b925050600181019050611209565b5085935050505092915050565b600061124e826117c7565b611258818561187f565b935061126383611776565b8060005b8381101561129457815161127b88826110c7565b975061128683611825565b925050600181019050611267565b5085935050505092915050565b60006112ac826117d2565b6112b68185611890565b9350836020820285016112c885611786565b8060005b8581101561130457848403895281516112e585826110df565b94506112f083611832565b925060208a019950506001810190506112cc565b50829750879550505050505092915050565b6000611321826117dd565b61132b81856118a1565b935061133683611796565b8060005b8381101561136757815161134e88826110f3565b97506113598361183f565b92505060018101905061133a565b5085935050505092915050565b61137d816118e6565b82525050565b61138c816118e6565b82525050565b61139b816118f2565b82525050565b6113aa816118f2565b82525050565b6113b9816118fc565b82525050565b60006113ca826117e8565b6113d481856118b2565b93506113e4818560208601611976565b6113ed816119a9565b840191505092915050565b61140181611952565b82525050565b6000611412826117f3565b61141c81856118c3565b935061142c818560208601611976565b611435816119a9565b840191505092915050565b600061144d601f836118c3565b91507f506172616d65746572206c656e67746873206d75737420626520657175616c006000830152602082019050919050565b61148981611948565b82525050565b61149881611948565b82525050565b60006060820190506114b3600083018661111a565b81810360208301526114c58185611407565b90506114d4604083018461148f565b949350505050565b600060208201905081810360008301526114f68184611187565b905092915050565b600060e0820190508181036000830152611518818a6111e5565b9050818103602083015261152c81896111e5565b905081810360408301526115408188611316565b905081810360608301526115548187611129565b905081810360808301526115688186611129565b905081810360a083015261157c8185611243565b905081810360c083015261159081846112a1565b905098975050505050505050565b60006020820190506115b36000830184611383565b92915050565b60006020820190506115ce60008301846113a1565b92915050565b60006040820190506115e960008301856113a1565b6115f660208301846113a1565b9392505050565b600060c08201905061161260008301896113a1565b61161f60208301886113a1565b61162c60408301876113a1565b611639606083018661148f565b611646608083018561111a565b61165360a083018461111a565b979650505050505050565b600060208201905061167360008301846113f8565b92915050565b6000602082019050818103600083015261169281611440565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156116bc57600080fd5b8060405250919050565b600067ffffffffffffffff8211156116dd57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561170557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561173157600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006118df82611928565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061195d82611964565b9050919050565b600061196f82611928565b9050919050565b60005b83811015611994578082015181840152602081019050611979565b838111156119a3576000848401525b50505050565b6000601f19601f8301169050919050565b6119c3816118d4565b81146119ce57600080fd5b50565b6119da816118e6565b81146119e557600080fd5b50565b6119f1816118f2565b81146119fc57600080fd5b50565b611a08816118fc565b8114611a1357600080fd5b50565b611a1f81611948565b8114611a2a57600080fd5b5056fea2646970667358221220f79dd1db5349d1112668d73fcfd988705cfe8b6a8cf2613ca7fbcc2a516c5bb464736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806376428c9b1461005c578063824240d114610092578063a36ff4d8146100c4578063ccd76101146100e2578063d760710614610112575b600080fd5b61007660048036038101906100719190610d90565b610142565b60405161008997969594939291906114fe565b60405180910390f35b6100ac60048036038101906100a79190610dfe565b61058b565b6040516100bb9392919061149e565b60405180910390f35b6100cc610652565b6040516100d9919061165e565b60405180910390f35b6100fc60048036038101906100f79190610f40565b610676565b604051610109919061159e565b60405180910390f35b61012c60048036038101906101279190610e27565b61088b565b60405161013991906114dc565b60405180910390f35b60608060608060608060608888905067ffffffffffffffff8111801561016757600080fd5b506040519080825280602002602001820160405280156101965781602001602082028036833780820191505090505b5096508888905067ffffffffffffffff811180156101b357600080fd5b506040519080825280602002602001820160405280156101e25781602001602082028036833780820191505090505b5095508888905067ffffffffffffffff811180156101ff57600080fd5b5060405190808252806020026020018201604052801561022e5781602001602082028036833780820191505090505b5094508888905067ffffffffffffffff8111801561024b57600080fd5b5060405190808252806020026020018201604052801561027a5781602001602082028036833780820191505090505b5093508888905067ffffffffffffffff8111801561029757600080fd5b506040519080825280602002602001820160405280156102c65781602001602082028036833780820191505090505b5092508888905067ffffffffffffffff811180156102e357600080fd5b506040519080825280602002602001820160405280156103125781602001602082028036833780820191505090505b5091508888905067ffffffffffffffff8111801561032f57600080fd5b5060405190808252806020026020018201604052801561036357816020015b606081526020019060019003908161034e5790505b50905060005b8989905081101561057e5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639757739b8b8b848181106103bc57fe5b905060200201356040518263ffffffff1660e01b81526004016103df91906115b9565b60006040518083038186803b1580156103f757600080fd5b505afa15801561040b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104349190610fc9565b8e888151811061044057fe5b602002602001018e898151811061045357fe5b602002602001018e8a8151811061046657fe5b602002602001018e8b8151811061047957fe5b602002602001018e8c8151811061048c57fe5b602002602001018e8d8151811061049f57fe5b602002602001018e8e815181106104b257fe5b60200260200101879052877bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152508773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152508773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250878152508781525087815250505050505050508080600101915050610369565b5092959891949750929550565b6000606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166333c0950a856040518263ffffffff1660e01b81526004016105eb91906115b9565b60006040518083038186803b15801561060357600080fd5b505afa158015610617573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106409190610cfb565b80935081945050504390509193909250565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dfd22ded89886040518363ffffffff1660e01b81526004016106d59291906115d4565b60006040518083038186803b1580156106ed57600080fd5b505afa158015610701573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061072a9190610d4f565b9050600081519050600081141561074657600092505050610881565b60006001905060005b8281101561087957600084828151811061076557fe5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107c15782156107b857600195505050505050610881565b6001925061086b565b821561086a5760008190508073ffffffffffffffffffffffffffffffffffffffff16639bb014288d8f8e8e8e8e6040518763ffffffff1660e01b815260040161080f969594939291906115fd565b60206040518083038186803b15801561082757600080fd5b505afa15801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f9190610dd5565b61086857600093505b505b5b50808060010191505061074f565b508093505050505b9695505050505050565b6060888890508b8b90501480156108a75750868690508b8b9050145b80156108b85750848490508b8b9050145b80156108c95750828290508b8b9050145b610908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ff90611679565b60405180910390fd5b8a8a905067ffffffffffffffff8111801561092257600080fd5b506040519080825280602002602001820160405280156109515781602001602082028036833780820191505090505b50905060005b8b8b9050811015610a11576109e68d8d8d8481811061097257fe5b905060200201358c8c8581811061098557fe5b905060200201358b8b8681811061099857fe5b905060200201358a8a878181106109ab57fe5b90506020020160208101906109c09190610cd2565b8989888181106109cc57fe5b90506020020160208101906109e19190610cd2565b610676565b8282815181106109f257fe5b6020026020010190151590811515815250508080600101915050610957565b509b9a5050505050505050505050565b600081359050610a30816119ba565b92915050565b600081519050610a45816119ba565b92915050565b60008083601f840112610a5d57600080fd5b8235905067ffffffffffffffff811115610a7657600080fd5b602083019150836020820283011115610a8e57600080fd5b9250929050565b600082601f830112610aa657600080fd5b8151610ab9610ab4826116c6565b611699565b91508181835260208401935060208101905083856020840282011115610ade57600080fd5b60005b83811015610b0e5781610af48882610a36565b845260208401935060208301925050600181019050610ae1565b5050505092915050565b60008083601f840112610b2a57600080fd5b8235905067ffffffffffffffff811115610b4357600080fd5b602083019150836020820283011115610b5b57600080fd5b9250929050565b60008083601f840112610b7457600080fd5b8235905067ffffffffffffffff811115610b8d57600080fd5b602083019150836020820283011115610ba557600080fd5b9250929050565b600081519050610bbb816119d1565b92915050565b600081359050610bd0816119e8565b92915050565b600081519050610be5816119e8565b92915050565b600081519050610bfa816119ff565b92915050565b600082601f830112610c1157600080fd5b8151610c24610c1f826116ee565b611699565b91508082526020830160208301858383011115610c4057600080fd5b610c4b838284611976565b50505092915050565b600082601f830112610c6557600080fd5b8151610c78610c738261171a565b611699565b91508082526020830160208301858383011115610c9457600080fd5b610c9f838284611976565b50505092915050565b600081359050610cb781611a16565b92915050565b600081519050610ccc81611a16565b92915050565b600060208284031215610ce457600080fd5b6000610cf284828501610a21565b91505092915050565b60008060408385031215610d0e57600080fd5b6000610d1c85828601610a36565b925050602083015167ffffffffffffffff811115610d3957600080fd5b610d4585828601610c54565b9150509250929050565b600060208284031215610d6157600080fd5b600082015167ffffffffffffffff811115610d7b57600080fd5b610d8784828501610a95565b91505092915050565b60008060208385031215610da357600080fd5b600083013567ffffffffffffffff811115610dbd57600080fd5b610dc985828601610b18565b92509250509250929050565b600060208284031215610de757600080fd5b6000610df584828501610bac565b91505092915050565b600060208284031215610e1057600080fd5b6000610e1e84828501610bc1565b91505092915050565b600080600080600080600080600080600060c08c8e031215610e4857600080fd5b6000610e568e828f01610bc1565b9b505060208c013567ffffffffffffffff811115610e7357600080fd5b610e7f8e828f01610b18565b9a509a505060408c013567ffffffffffffffff811115610e9e57600080fd5b610eaa8e828f01610b18565b985098505060608c013567ffffffffffffffff811115610ec957600080fd5b610ed58e828f01610b62565b965096505060808c013567ffffffffffffffff811115610ef457600080fd5b610f008e828f01610a4b565b945094505060a08c013567ffffffffffffffff811115610f1f57600080fd5b610f2b8e828f01610a4b565b92509250509295989b509295989b9093969950565b60008060008060008060c08789031215610f5957600080fd5b6000610f6789828a01610bc1565b9650506020610f7889828a01610bc1565b9550506040610f8989828a01610bc1565b9450506060610f9a89828a01610ca8565b9350506080610fab89828a01610a21565b92505060a0610fbc89828a01610a21565b9150509295509295509295565b600080600080600080600060e0888a031215610fe457600080fd5b6000610ff28a828b01610bd6565b97505060206110038a828b01610bd6565b96505060406110148a828b01610cbd565b95505060606110258a828b01610a36565b94505060806110368a828b01610a36565b93505060a06110478a828b01610beb565b92505060c088015167ffffffffffffffff81111561106457600080fd5b6110708a828b01610c00565b91505092959891949750929550565b600061108b838361110b565b60208301905092915050565b60006110a38383611374565b60208301905092915050565b60006110bb8383611392565b60208301905092915050565b60006110d383836113b0565b60208301905092915050565b60006110eb83836113bf565b905092915050565b60006110ff8383611480565b60208301905092915050565b611114816118d4565b82525050565b611123816118d4565b82525050565b6000611134826117a6565b61113e818561184c565b935061114983611746565b8060005b8381101561117a578151611161888261107f565b975061116c836117fe565b92505060018101905061114d565b5085935050505092915050565b6000611192826117b1565b61119c818561185d565b93506111a783611756565b8060005b838110156111d85781516111bf8882611097565b97506111ca8361180b565b9250506001810190506111ab565b5085935050505092915050565b60006111f0826117bc565b6111fa818561186e565b935061120583611766565b8060005b8381101561123657815161121d88826110af565b975061122883611818565b925050600181019050611209565b5085935050505092915050565b600061124e826117c7565b611258818561187f565b935061126383611776565b8060005b8381101561129457815161127b88826110c7565b975061128683611825565b925050600181019050611267565b5085935050505092915050565b60006112ac826117d2565b6112b68185611890565b9350836020820285016112c885611786565b8060005b8581101561130457848403895281516112e585826110df565b94506112f083611832565b925060208a019950506001810190506112cc565b50829750879550505050505092915050565b6000611321826117dd565b61132b81856118a1565b935061133683611796565b8060005b8381101561136757815161134e88826110f3565b97506113598361183f565b92505060018101905061133a565b5085935050505092915050565b61137d816118e6565b82525050565b61138c816118e6565b82525050565b61139b816118f2565b82525050565b6113aa816118f2565b82525050565b6113b9816118fc565b82525050565b60006113ca826117e8565b6113d481856118b2565b93506113e4818560208601611976565b6113ed816119a9565b840191505092915050565b61140181611952565b82525050565b6000611412826117f3565b61141c81856118c3565b935061142c818560208601611976565b611435816119a9565b840191505092915050565b600061144d601f836118c3565b91507f506172616d65746572206c656e67746873206d75737420626520657175616c006000830152602082019050919050565b61148981611948565b82525050565b61149881611948565b82525050565b60006060820190506114b3600083018661111a565b81810360208301526114c58185611407565b90506114d4604083018461148f565b949350505050565b600060208201905081810360008301526114f68184611187565b905092915050565b600060e0820190508181036000830152611518818a6111e5565b9050818103602083015261152c81896111e5565b905081810360408301526115408188611316565b905081810360608301526115548187611129565b905081810360808301526115688186611129565b905081810360a083015261157c8185611243565b905081810360c083015261159081846112a1565b905098975050505050505050565b60006020820190506115b36000830184611383565b92915050565b60006020820190506115ce60008301846113a1565b92915050565b60006040820190506115e960008301856113a1565b6115f660208301846113a1565b9392505050565b600060c08201905061161260008301896113a1565b61161f60208301886113a1565b61162c60408301876113a1565b611639606083018661148f565b611646608083018561111a565b61165360a083018461111a565b979650505050505050565b600060208201905061167360008301846113f8565b92915050565b6000602082019050818103600083015261169281611440565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156116bc57600080fd5b8060405250919050565b600067ffffffffffffffff8211156116dd57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561170557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561173157600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006118df82611928565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061195d82611964565b9050919050565b600061196f82611928565b9050919050565b60005b83811015611994578082015181840152602081019050611979565b838111156119a3576000848401525b50505050565b6000601f19601f8301169050919050565b6119c3816118d4565b81146119ce57600080fd5b50565b6119da816118e6565b81146119e557600080fd5b50565b6119f1816118f2565b81146119fc57600080fd5b50565b611a08816118fc565b8114611a1357600080fd5b50565b611a1f81611948565b8114611a2a57600080fd5b5056fea2646970667358221220f79dd1db5349d1112668d73fcfd988705cfe8b6a8cf2613ca7fbcc2a516c5bb464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkAuthorizationStatus(bytes32,bytes32,bytes32,uint256,address,address)": {
        "details": "Authorizer contracts are not trusted, so this method should only be called off-chain. The elements of the authorizer array are either addresses of Authorizer contracts with the interface defined in IAuthorizer or 0. Say we have authorizer contracts X, Y, Z, T, and our authorizer array is [X, Y, 0, Z, T]. This means that the requester should satisfy (X AND Y) OR (Z AND T) to be considered authorized. In other words, consequent authorizer contracts need to verify authorization simultaneously, while 0 represents the start of an independent authorization policy. From a logical standpoint, consequent authorizers get ANDed while 0 acts as an OR gate, providing great flexibility in forming an authorization policy out of simple building blocks. We could also define a NOT gate here to achieve a full set of universal logic gates, but that does not make much sense in this context because authorizers tend to check for positive conditions (have paid, is whitelisted, etc.) and we would not need policies that require these to be false. Note that authorizers should not start or end with 0, and 0s should not be used consecutively (e.g., [X, Y, 0, 0, Z, T]). [] returns false (deny everyone), [0] returns true (accept everyone).",
        "params": {
          "clientAddress": "Client address",
          "designatedWallet": "Designated wallet",
          "endpointId": "Endpoint ID from EndpointStore",
          "providerId": "Provider ID from ProviderStore",
          "requestId": "Request ID",
          "requesterIndex": "Requester index from RequesterStore"
        },
        "returns": {
          "status": "Authorization status of the request"
        }
      },
      "checkAuthorizationStatuses(bytes32,bytes32[],bytes32[],uint256[],address[],address[])": {
        "params": {
          "clientAddresses": "Client addresses",
          "designatedWallets": "Designated wallets",
          "endpointIds": "Endpoint IDs from EndpointStore",
          "providerId": "Provider ID from ProviderStore",
          "requestIds": "Request IDs",
          "requesterIndices": "Requester indices from RequesterStore"
        },
        "returns": {
          "statuses": "Authorization statuses of the request"
        }
      },
      "getProviderAndBlockNumber(bytes32)": {
        "params": {
          "providerId": "Provider ID"
        },
        "returns": {
          "admin": "Provider admin",
          "blockNumber": "Block number",
          "xpub": "Master public key of the provider node"
        }
      },
      "getTemplates(bytes32[])": {
        "params": {
          "templateIds": "Request template IDs"
        },
        "returns": {
          "designatedWallets": "Designated wallets that are requested to fulfill the request",
          "endpointIds": "Endpoint IDs from EndpointStore",
          "fulfillAddresses": "Addresses that will be called to fulfill",
          "fulfillFunctionIds": "Signatures of the functions that will be called to fulfill",
          "parameters": "Array of static request parameters (i.e., parameters that will not change between requests, unlike the dynamic parameters determined at runtime)",
          "providerIds": "Provider IDs from ProviderStore",
          "requesterIndices": "Requester indices from RequesterStore"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkAuthorizationStatus(bytes32,bytes32,bytes32,uint256,address,address)": {
        "notice": "Uses the authorizer contracts of an endpoint of a provider to decide if a client contract is authorized to call the endpoint. Once an oracle node receives a request, it calls this method to determine if it should respond. Similarly, third parties can use this method to determine if a client contract is authorized to call an endpoint."
      },
      "checkAuthorizationStatuses(bytes32,bytes32[],bytes32[],uint256[],address[],address[])": {
        "notice": "A convenience function to make multiple authorization status checks with a single call"
      },
      "getProviderAndBlockNumber(bytes32)": {
        "notice": "A convenience function to retrieve provider parameters and the block number with a single call"
      },
      "getTemplates(bytes32[])": {
        "notice": "A convenience function to retrieve multiple templates with a single call"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 528,
        "contract": "contracts/Convenience.sol:Convenience",
        "label": "airnode",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAirnode)1879"
      }
    ],
    "types": {
      "t_contract(IAirnode)1879": {
        "encoding": "inplace",
        "label": "contract IAirnode",
        "numberOfBytes": "20"
      }
    }
  }
}